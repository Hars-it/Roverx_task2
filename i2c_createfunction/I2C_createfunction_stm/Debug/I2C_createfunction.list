
I2C_createfunction.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003604  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003798  08003798  00004798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037b0  080037b0  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080037b0  080037b0  000047b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037b8  080037b8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037b8  080037b8  000047b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037bc  080037bc  000047bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080037c0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  2000000c  080037cc  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  080037cc  0000508c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e30  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000178f  00000000  00000000  0000ce6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b8  00000000  00000000  0000e600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005e7  00000000  00000000  0000edb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014b50  00000000  00000000  0000f39f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a257  00000000  00000000  00023eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008158d  00000000  00000000  0002e146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000af6d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f10  00000000  00000000  000af718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000b1628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003780 	.word	0x08003780

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003780 	.word	0x08003780

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_I2C_ListenCpltCallback>:
uint8_t a, b, c, d, e;

uint8_t count = 0;

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 80004cc:	6878      	ldr	r0, [r7, #4]
 80004ce:	f001 f809 	bl	80014e4 <HAL_I2C_EnableListen_IT>
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
	...

080004dc <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	460b      	mov	r3, r1
 80004e6:	70fb      	strb	r3, [r7, #3]
 80004e8:	4613      	mov	r3, r2
 80004ea:	803b      	strh	r3, [r7, #0]
	if (TransferDirection == I2C_DIRECTION_TRANSMIT)
 80004ec:	78fb      	ldrb	r3, [r7, #3]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d106      	bne.n	8000500 <HAL_I2C_AddrCallback+0x24>
	{
		HAL_I2C_Slave_Sequential_Receive_IT(hi2c, RxData, RxSIZE, I2C_FIRST_AND_LAST_FRAME);
 80004f2:	2308      	movs	r3, #8
 80004f4:	2205      	movs	r2, #5
 80004f6:	4905      	ldr	r1, [pc, #20]	@ (800050c <HAL_I2C_AddrCallback+0x30>)
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f000 ff80 	bl	80013fe <HAL_I2C_Slave_Seq_Receive_IT>
	}
	else
	{
		Error_Handler();
	}
}
 80004fe:	e001      	b.n	8000504 <HAL_I2C_AddrCallback+0x28>
		Error_Handler();
 8000500:	f000 f9cc 	bl	800089c <Error_Handler>
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000028 	.word	0x20000028

08000510 <incrementVar1.0>:
		var3 = RxData[2];
		var4 = RxData[3];
		var5 = RxData[4];


		void incrementVar1() {
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	f8c7 c004 	str.w	ip, [r7, #4]
		  var1++;
 800051a:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <incrementVar1.0+0x24>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	3301      	adds	r3, #1
 8000520:	b2da      	uxtb	r2, r3
 8000522:	4b04      	ldr	r3, [pc, #16]	@ (8000534 <incrementVar1.0+0x24>)
 8000524:	701a      	strb	r2, [r3, #0]
		}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	2000002d 	.word	0x2000002d

08000538 <HAL_I2C_SlaveRxCpltCallback>:
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
 8000540:	f107 0318 	add.w	r3, r7, #24
 8000544:	60fb      	str	r3, [r7, #12]
	count++;
 8000546:	4b1e      	ldr	r3, [pc, #120]	@ (80005c0 <HAL_I2C_SlaveRxCpltCallback+0x88>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	3301      	adds	r3, #1
 800054c:	b2da      	uxtb	r2, r3
 800054e:	4b1c      	ldr	r3, [pc, #112]	@ (80005c0 <HAL_I2C_SlaveRxCpltCallback+0x88>)
 8000550:	701a      	strb	r2, [r3, #0]
	if (hi2c->Instance == I2C1) {
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a1b      	ldr	r2, [pc, #108]	@ (80005c4 <HAL_I2C_SlaveRxCpltCallback+0x8c>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d12c      	bne.n	80005b6 <HAL_I2C_SlaveRxCpltCallback+0x7e>
		var1 = RxData[0];
 800055c:	4b1a      	ldr	r3, [pc, #104]	@ (80005c8 <HAL_I2C_SlaveRxCpltCallback+0x90>)
 800055e:	781a      	ldrb	r2, [r3, #0]
 8000560:	4b1a      	ldr	r3, [pc, #104]	@ (80005cc <HAL_I2C_SlaveRxCpltCallback+0x94>)
 8000562:	701a      	strb	r2, [r3, #0]
		var2 = RxData[1];
 8000564:	4b18      	ldr	r3, [pc, #96]	@ (80005c8 <HAL_I2C_SlaveRxCpltCallback+0x90>)
 8000566:	785a      	ldrb	r2, [r3, #1]
 8000568:	4b19      	ldr	r3, [pc, #100]	@ (80005d0 <HAL_I2C_SlaveRxCpltCallback+0x98>)
 800056a:	701a      	strb	r2, [r3, #0]
		var3 = RxData[2];
 800056c:	4b16      	ldr	r3, [pc, #88]	@ (80005c8 <HAL_I2C_SlaveRxCpltCallback+0x90>)
 800056e:	789a      	ldrb	r2, [r3, #2]
 8000570:	4b18      	ldr	r3, [pc, #96]	@ (80005d4 <HAL_I2C_SlaveRxCpltCallback+0x9c>)
 8000572:	701a      	strb	r2, [r3, #0]
		var4 = RxData[3];
 8000574:	4b14      	ldr	r3, [pc, #80]	@ (80005c8 <HAL_I2C_SlaveRxCpltCallback+0x90>)
 8000576:	78da      	ldrb	r2, [r3, #3]
 8000578:	4b17      	ldr	r3, [pc, #92]	@ (80005d8 <HAL_I2C_SlaveRxCpltCallback+0xa0>)
 800057a:	701a      	strb	r2, [r3, #0]
		var5 = RxData[4];
 800057c:	4b12      	ldr	r3, [pc, #72]	@ (80005c8 <HAL_I2C_SlaveRxCpltCallback+0x90>)
 800057e:	791a      	ldrb	r2, [r3, #4]
 8000580:	4b16      	ldr	r3, [pc, #88]	@ (80005dc <HAL_I2C_SlaveRxCpltCallback+0xa4>)
 8000582:	701a      	strb	r2, [r3, #0]

		void incrementVar5() {
		  var5++;
		}

		incrementVar1();
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	469c      	mov	ip, r3
 800058a:	f7ff ffc1 	bl	8000510 <incrementVar1.0>
		incrementVar2();
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	469c      	mov	ip, r3
 8000594:	f000 f824 	bl	80005e0 <incrementVar2.1>
		incrementVar3();
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	469c      	mov	ip, r3
 800059e:	f000 f833 	bl	8000608 <incrementVar3.2>
		incrementVar4();
 80005a2:	f107 030c 	add.w	r3, r7, #12
 80005a6:	469c      	mov	ip, r3
 80005a8:	f000 f842 	bl	8000630 <incrementVar4.3>
		incrementVar5();
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	469c      	mov	ip, r3
 80005b2:	f000 f851 	bl	8000658 <incrementVar5.4>

	}
}
 80005b6:	bf00      	nop
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000032 	.word	0x20000032
 80005c4:	40005400 	.word	0x40005400
 80005c8:	20000028 	.word	0x20000028
 80005cc:	2000002d 	.word	0x2000002d
 80005d0:	2000002e 	.word	0x2000002e
 80005d4:	2000002f 	.word	0x2000002f
 80005d8:	20000030 	.word	0x20000030
 80005dc:	20000031 	.word	0x20000031

080005e0 <incrementVar2.1>:
		void incrementVar2() {
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	f8c7 c004 	str.w	ip, [r7, #4]
		  var2++;
 80005ea:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <incrementVar2.1+0x24>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	3301      	adds	r3, #1
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4b04      	ldr	r3, [pc, #16]	@ (8000604 <incrementVar2.1+0x24>)
 80005f4:	701a      	strb	r2, [r3, #0]
		}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	2000002e 	.word	0x2000002e

08000608 <incrementVar3.2>:
		void incrementVar3() {
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	f8c7 c004 	str.w	ip, [r7, #4]
		  var3++;
 8000612:	4b06      	ldr	r3, [pc, #24]	@ (800062c <incrementVar3.2+0x24>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	3301      	adds	r3, #1
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4b04      	ldr	r3, [pc, #16]	@ (800062c <incrementVar3.2+0x24>)
 800061c:	701a      	strb	r2, [r3, #0]
		}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	2000002f 	.word	0x2000002f

08000630 <incrementVar4.3>:
		void incrementVar4() {
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	f8c7 c004 	str.w	ip, [r7, #4]
		  var4++;
 800063a:	4b06      	ldr	r3, [pc, #24]	@ (8000654 <incrementVar4.3+0x24>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	3301      	adds	r3, #1
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4b04      	ldr	r3, [pc, #16]	@ (8000654 <incrementVar4.3+0x24>)
 8000644:	701a      	strb	r2, [r3, #0]
		}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000030 	.word	0x20000030

08000658 <incrementVar5.4>:
		void incrementVar5() {
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	f8c7 c004 	str.w	ip, [r7, #4]
		  var5++;
 8000662:	4b06      	ldr	r3, [pc, #24]	@ (800067c <incrementVar5.4+0x24>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	3301      	adds	r3, #1
 8000668:	b2da      	uxtb	r2, r3
 800066a:	4b04      	ldr	r3, [pc, #16]	@ (800067c <incrementVar5.4+0x24>)
 800066c:	701a      	strb	r2, [r3, #0]
		}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	20000031 	.word	0x20000031

08000680 <HAL_I2C_ErrorCallback>:



void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f000 ff2b 	bl	80014e4 <HAL_I2C_EnableListen_IT>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069c:	f000 fa04 	bl	8000aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a0:	f000 f812 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a4:	f000 f8a8 	bl	80007f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006a8:	f000 f878 	bl	800079c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_I2C_EnableListen_IT(&hi2c1)!= HAL_OK)
 80006ac:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <main+0x2c>)
 80006ae:	f000 ff19 	bl	80014e4 <HAL_I2C_EnableListen_IT>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d002      	beq.n	80006be <main+0x26>
      {
    	  Error_Handler();
 80006b8:	f000 f8f0 	bl	800089c <Error_Handler>
      }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	e7fd      	b.n	80006be <main+0x26>
 80006c2:	bf00      	nop
 80006c4:	20000034 	.word	0x20000034

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	@ 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	@ 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 f826 	bl	8003728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	4b28      	ldr	r3, [pc, #160]	@ (8000794 <SystemClock_Config+0xcc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f4:	4a27      	ldr	r2, [pc, #156]	@ (8000794 <SystemClock_Config+0xcc>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80006fc:	4b25      	ldr	r3, [pc, #148]	@ (8000794 <SystemClock_Config+0xcc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b22      	ldr	r3, [pc, #136]	@ (8000798 <SystemClock_Config+0xd0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000714:	4a20      	ldr	r2, [pc, #128]	@ (8000798 <SystemClock_Config+0xd0>)
 8000716:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b1e      	ldr	r3, [pc, #120]	@ (8000798 <SystemClock_Config+0xd0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000728:	2301      	movs	r3, #1
 800072a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800072c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000730:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000732:	2302      	movs	r3, #2
 8000734:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000736:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800073a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800073c:	2319      	movs	r3, #25
 800073e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000740:	23a8      	movs	r3, #168	@ 0xa8
 8000742:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000744:	2302      	movs	r3, #2
 8000746:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000748:	2304      	movs	r3, #4
 800074a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074c:	f107 0320 	add.w	r3, r7, #32
 8000750:	4618      	mov	r0, r3
 8000752:	f002 fba5 	bl	8002ea0 <HAL_RCC_OscConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800075c:	f000 f89e 	bl	800089c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000760:	230f      	movs	r3, #15
 8000762:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000764:	2302      	movs	r3, #2
 8000766:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000770:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	2102      	movs	r1, #2
 800077c:	4618      	mov	r0, r3
 800077e:	f002 fe07 	bl	8003390 <HAL_RCC_ClockConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000788:	f000 f888 	bl	800089c <Error_Handler>
  }
}
 800078c:	bf00      	nop
 800078e:	3750      	adds	r7, #80	@ 0x50
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a0:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <MX_I2C1_Init+0x50>)
 80007a2:	4a13      	ldr	r2, [pc, #76]	@ (80007f0 <MX_I2C1_Init+0x54>)
 80007a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007a6:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <MX_I2C1_Init+0x50>)
 80007a8:	4a12      	ldr	r2, [pc, #72]	@ (80007f4 <MX_I2C1_Init+0x58>)
 80007aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <MX_I2C1_Init+0x50>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 16;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <MX_I2C1_Init+0x50>)
 80007b4:	2210      	movs	r2, #16
 80007b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <MX_I2C1_Init+0x50>)
 80007ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	@ (80007ec <MX_I2C1_Init+0x50>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007c6:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <MX_I2C1_Init+0x50>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007cc:	4b07      	ldr	r3, [pc, #28]	@ (80007ec <MX_I2C1_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d2:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <MX_I2C1_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d8:	4804      	ldr	r0, [pc, #16]	@ (80007ec <MX_I2C1_Init+0x50>)
 80007da:	f000 fcb7 	bl	800114c <HAL_I2C_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007e4:	f000 f85a 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000034 	.word	0x20000034
 80007f0:	40005400 	.word	0x40005400
 80007f4:	000186a0 	.word	0x000186a0

080007f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b088      	sub	sp, #32
 80007fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	4b20      	ldr	r3, [pc, #128]	@ (8000894 <MX_GPIO_Init+0x9c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a1f      	ldr	r2, [pc, #124]	@ (8000894 <MX_GPIO_Init+0x9c>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b1d      	ldr	r3, [pc, #116]	@ (8000894 <MX_GPIO_Init+0x9c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b19      	ldr	r3, [pc, #100]	@ (8000894 <MX_GPIO_Init+0x9c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a18      	ldr	r2, [pc, #96]	@ (8000894 <MX_GPIO_Init+0x9c>)
 8000834:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b16      	ldr	r3, [pc, #88]	@ (8000894 <MX_GPIO_Init+0x9c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <MX_GPIO_Init+0x9c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a11      	ldr	r2, [pc, #68]	@ (8000894 <MX_GPIO_Init+0x9c>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <MX_GPIO_Init+0x9c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000868:	480b      	ldr	r0, [pc, #44]	@ (8000898 <MX_GPIO_Init+0xa0>)
 800086a:	f000 fc55 	bl	8001118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800086e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000872:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	4619      	mov	r1, r3
 8000886:	4804      	ldr	r0, [pc, #16]	@ (8000898 <MX_GPIO_Init+0xa0>)
 8000888:	f000 fac2 	bl	8000e10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800088c:	bf00      	nop
 800088e:	3720      	adds	r7, #32
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40023800 	.word	0x40023800
 8000898:	40020800 	.word	0x40020800

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <Error_Handler+0x8>

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b10      	ldr	r3, [pc, #64]	@ (80008f4 <HAL_MspInit+0x4c>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b6:	4a0f      	ldr	r2, [pc, #60]	@ (80008f4 <HAL_MspInit+0x4c>)
 80008b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008be:	4b0d      	ldr	r3, [pc, #52]	@ (80008f4 <HAL_MspInit+0x4c>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <HAL_MspInit+0x4c>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d2:	4a08      	ldr	r2, [pc, #32]	@ (80008f4 <HAL_MspInit+0x4c>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008da:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <HAL_MspInit+0x4c>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800

080008f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	@ 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a21      	ldr	r2, [pc, #132]	@ (800099c <HAL_I2C_MspInit+0xa4>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d13b      	bne.n	8000992 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b20      	ldr	r3, [pc, #128]	@ (80009a0 <HAL_I2C_MspInit+0xa8>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a1f      	ldr	r2, [pc, #124]	@ (80009a0 <HAL_I2C_MspInit+0xa8>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b1d      	ldr	r3, [pc, #116]	@ (80009a0 <HAL_I2C_MspInit+0xa8>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000936:	23c0      	movs	r3, #192	@ 0xc0
 8000938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800093a:	2312      	movs	r3, #18
 800093c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000942:	2303      	movs	r3, #3
 8000944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000946:	2304      	movs	r3, #4
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	4814      	ldr	r0, [pc, #80]	@ (80009a4 <HAL_I2C_MspInit+0xac>)
 8000952:	f000 fa5d 	bl	8000e10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <HAL_I2C_MspInit+0xa8>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095e:	4a10      	ldr	r2, [pc, #64]	@ (80009a0 <HAL_I2C_MspInit+0xa8>)
 8000960:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000964:	6413      	str	r3, [r2, #64]	@ 0x40
 8000966:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <HAL_I2C_MspInit+0xa8>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2100      	movs	r1, #0
 8000976:	201f      	movs	r0, #31
 8000978:	f000 f9e3 	bl	8000d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800097c:	201f      	movs	r0, #31
 800097e:	f000 f9fc 	bl	8000d7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2100      	movs	r1, #0
 8000986:	2020      	movs	r0, #32
 8000988:	f000 f9db 	bl	8000d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800098c:	2020      	movs	r0, #32
 800098e:	f000 f9f4 	bl	8000d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000992:	bf00      	nop
 8000994:	3728      	adds	r7, #40	@ 0x28
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40005400 	.word	0x40005400
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40020400 	.word	0x40020400

080009a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <NMI_Handler+0x4>

080009b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <HardFault_Handler+0x4>

080009b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <MemManage_Handler+0x4>

080009c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <BusFault_Handler+0x4>

080009c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <UsageFault_Handler+0x4>

080009d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fe:	f000 f8a5 	bl	8000b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000a0c:	4802      	ldr	r0, [pc, #8]	@ (8000a18 <I2C1_EV_IRQHandler+0x10>)
 8000a0e:	f000 fd9f 	bl	8001550 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000034 	.word	0x20000034

08000a1c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000a20:	4802      	ldr	r0, [pc, #8]	@ (8000a2c <I2C1_ER_IRQHandler+0x10>)
 8000a22:	f000 fee8 	bl	80017f6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000034 	.word	0x20000034

08000a30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a34:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <SystemInit+0x20>)
 8000a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a3a:	4a05      	ldr	r2, [pc, #20]	@ (8000a50 <SystemInit+0x20>)
 8000a3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a58:	f7ff ffea 	bl	8000a30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a5c:	480c      	ldr	r0, [pc, #48]	@ (8000a90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a5e:	490d      	ldr	r1, [pc, #52]	@ (8000a94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a60:	4a0d      	ldr	r2, [pc, #52]	@ (8000a98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a64:	e002      	b.n	8000a6c <LoopCopyDataInit>

08000a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6a:	3304      	adds	r3, #4

08000a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a70:	d3f9      	bcc.n	8000a66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a72:	4a0a      	ldr	r2, [pc, #40]	@ (8000a9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a74:	4c0a      	ldr	r4, [pc, #40]	@ (8000aa0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a78:	e001      	b.n	8000a7e <LoopFillZerobss>

08000a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a7c:	3204      	adds	r2, #4

08000a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a80:	d3fb      	bcc.n	8000a7a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000a82:	f002 fe59 	bl	8003738 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a86:	f7ff fe07 	bl	8000698 <main>
  bx  lr    
 8000a8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a94:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a98:	080037c0 	.word	0x080037c0
  ldr r2, =_sbss
 8000a9c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000aa0:	2000008c 	.word	0x2000008c

08000aa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC_IRQHandler>
	...

08000aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <HAL_Init+0x40>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae8 <HAL_Init+0x40>)
 8000ab2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ab6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae8 <HAL_Init+0x40>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae8 <HAL_Init+0x40>)
 8000abe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ac2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac4:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <HAL_Init+0x40>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a07      	ldr	r2, [pc, #28]	@ (8000ae8 <HAL_Init+0x40>)
 8000aca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ace:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	f000 f92b 	bl	8000d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad6:	200f      	movs	r0, #15
 8000ad8:	f000 f808 	bl	8000aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000adc:	f7ff fee4 	bl	80008a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023c00 	.word	0x40023c00

08000aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af4:	4b12      	ldr	r3, [pc, #72]	@ (8000b40 <HAL_InitTick+0x54>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <HAL_InitTick+0x58>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	4619      	mov	r1, r3
 8000afe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f943 	bl	8000d96 <HAL_SYSTICK_Config>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e00e      	b.n	8000b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b0f      	cmp	r3, #15
 8000b1e:	d80a      	bhi.n	8000b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b20:	2200      	movs	r2, #0
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	f000 f90b 	bl	8000d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b2c:	4a06      	ldr	r2, [pc, #24]	@ (8000b48 <HAL_InitTick+0x5c>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	e000      	b.n	8000b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000000 	.word	0x20000000
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000004 	.word	0x20000004

08000b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b50:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <HAL_IncTick+0x20>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <HAL_IncTick+0x24>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4a04      	ldr	r2, [pc, #16]	@ (8000b70 <HAL_IncTick+0x24>)
 8000b5e:	6013      	str	r3, [r2, #0]
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	20000088 	.word	0x20000088

08000b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return uwTick;
 8000b78:	4b03      	ldr	r3, [pc, #12]	@ (8000b88 <HAL_GetTick+0x14>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	20000088 	.word	0x20000088

08000b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bbe:	4a04      	ldr	r2, [pc, #16]	@ (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	60d3      	str	r3, [r2, #12]
}
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd8:	4b04      	ldr	r3, [pc, #16]	@ (8000bec <__NVIC_GetPriorityGrouping+0x18>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	0a1b      	lsrs	r3, r3, #8
 8000bde:	f003 0307 	and.w	r3, r3, #7
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	db0b      	blt.n	8000c1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	f003 021f 	and.w	r2, r3, #31
 8000c08:	4907      	ldr	r1, [pc, #28]	@ (8000c28 <__NVIC_EnableIRQ+0x38>)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	095b      	lsrs	r3, r3, #5
 8000c10:	2001      	movs	r0, #1
 8000c12:	fa00 f202 	lsl.w	r2, r0, r2
 8000c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000e100 	.word	0xe000e100

08000c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	6039      	str	r1, [r7, #0]
 8000c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	db0a      	blt.n	8000c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	490c      	ldr	r1, [pc, #48]	@ (8000c78 <__NVIC_SetPriority+0x4c>)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	0112      	lsls	r2, r2, #4
 8000c4c:	b2d2      	uxtb	r2, r2
 8000c4e:	440b      	add	r3, r1
 8000c50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c54:	e00a      	b.n	8000c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	4908      	ldr	r1, [pc, #32]	@ (8000c7c <__NVIC_SetPriority+0x50>)
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	f003 030f 	and.w	r3, r3, #15
 8000c62:	3b04      	subs	r3, #4
 8000c64:	0112      	lsls	r2, r2, #4
 8000c66:	b2d2      	uxtb	r2, r2
 8000c68:	440b      	add	r3, r1
 8000c6a:	761a      	strb	r2, [r3, #24]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000e100 	.word	0xe000e100
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b089      	sub	sp, #36	@ 0x24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	f1c3 0307 	rsb	r3, r3, #7
 8000c9a:	2b04      	cmp	r3, #4
 8000c9c:	bf28      	it	cs
 8000c9e:	2304      	movcs	r3, #4
 8000ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	3304      	adds	r3, #4
 8000ca6:	2b06      	cmp	r3, #6
 8000ca8:	d902      	bls.n	8000cb0 <NVIC_EncodePriority+0x30>
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3b03      	subs	r3, #3
 8000cae:	e000      	b.n	8000cb2 <NVIC_EncodePriority+0x32>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43da      	mvns	r2, r3
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd2:	43d9      	mvns	r1, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	4313      	orrs	r3, r2
         );
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3724      	adds	r7, #36	@ 0x24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
	...

08000ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cf8:	d301      	bcc.n	8000cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00f      	b.n	8000d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000d28 <SysTick_Config+0x40>)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d06:	210f      	movs	r1, #15
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	f7ff ff8e 	bl	8000c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d10:	4b05      	ldr	r3, [pc, #20]	@ (8000d28 <SysTick_Config+0x40>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d16:	4b04      	ldr	r3, [pc, #16]	@ (8000d28 <SysTick_Config+0x40>)
 8000d18:	2207      	movs	r2, #7
 8000d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	e000e010 	.word	0xe000e010

08000d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff ff29 	bl	8000b8c <__NVIC_SetPriorityGrouping>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b086      	sub	sp, #24
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	4603      	mov	r3, r0
 8000d4a:	60b9      	str	r1, [r7, #8]
 8000d4c:	607a      	str	r2, [r7, #4]
 8000d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d54:	f7ff ff3e 	bl	8000bd4 <__NVIC_GetPriorityGrouping>
 8000d58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	68b9      	ldr	r1, [r7, #8]
 8000d5e:	6978      	ldr	r0, [r7, #20]
 8000d60:	f7ff ff8e 	bl	8000c80 <NVIC_EncodePriority>
 8000d64:	4602      	mov	r2, r0
 8000d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff5d 	bl	8000c2c <__NVIC_SetPriority>
}
 8000d72:	bf00      	nop
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4603      	mov	r3, r0
 8000d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff31 	bl	8000bf0 <__NVIC_EnableIRQ>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff ffa2 	bl	8000ce8 <SysTick_Config>
 8000da4:	4603      	mov	r3, r0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d004      	beq.n	8000dcc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2280      	movs	r2, #128	@ 0x80
 8000dc6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e00c      	b.n	8000de6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2205      	movs	r2, #5
 8000dd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f022 0201 	bic.w	r2, r2, #1
 8000de2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e00:	b2db      	uxtb	r3, r3
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	@ 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
 8000e2a:	e159      	b.n	80010e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	697a      	ldr	r2, [r7, #20]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	f040 8148 	bne.w	80010da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f003 0303 	and.w	r3, r3, #3
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d005      	beq.n	8000e62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d130      	bne.n	8000ec4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4013      	ands	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	68da      	ldr	r2, [r3, #12]
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e98:	2201      	movs	r2, #1
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	091b      	lsrs	r3, r3, #4
 8000eae:	f003 0201 	and.w	r2, r3, #1
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	d017      	beq.n	8000f00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	2203      	movs	r2, #3
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 0303 	and.w	r3, r3, #3
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d123      	bne.n	8000f54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	08da      	lsrs	r2, r3, #3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3208      	adds	r2, #8
 8000f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	f003 0307 	and.w	r3, r3, #7
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	220f      	movs	r2, #15
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	691a      	ldr	r2, [r3, #16]
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	08da      	lsrs	r2, r3, #3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	3208      	adds	r2, #8
 8000f4e:	69b9      	ldr	r1, [r7, #24]
 8000f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	2203      	movs	r2, #3
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0203 	and.w	r2, r3, #3
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f000 80a2 	beq.w	80010da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	4b57      	ldr	r3, [pc, #348]	@ (80010f8 <HAL_GPIO_Init+0x2e8>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9e:	4a56      	ldr	r2, [pc, #344]	@ (80010f8 <HAL_GPIO_Init+0x2e8>)
 8000fa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fa6:	4b54      	ldr	r3, [pc, #336]	@ (80010f8 <HAL_GPIO_Init+0x2e8>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000faa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fb2:	4a52      	ldr	r2, [pc, #328]	@ (80010fc <HAL_GPIO_Init+0x2ec>)
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	089b      	lsrs	r3, r3, #2
 8000fb8:	3302      	adds	r3, #2
 8000fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	220f      	movs	r2, #15
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a49      	ldr	r2, [pc, #292]	@ (8001100 <HAL_GPIO_Init+0x2f0>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d019      	beq.n	8001012 <HAL_GPIO_Init+0x202>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a48      	ldr	r2, [pc, #288]	@ (8001104 <HAL_GPIO_Init+0x2f4>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d013      	beq.n	800100e <HAL_GPIO_Init+0x1fe>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a47      	ldr	r2, [pc, #284]	@ (8001108 <HAL_GPIO_Init+0x2f8>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d00d      	beq.n	800100a <HAL_GPIO_Init+0x1fa>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a46      	ldr	r2, [pc, #280]	@ (800110c <HAL_GPIO_Init+0x2fc>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d007      	beq.n	8001006 <HAL_GPIO_Init+0x1f6>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a45      	ldr	r2, [pc, #276]	@ (8001110 <HAL_GPIO_Init+0x300>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d101      	bne.n	8001002 <HAL_GPIO_Init+0x1f2>
 8000ffe:	2304      	movs	r3, #4
 8001000:	e008      	b.n	8001014 <HAL_GPIO_Init+0x204>
 8001002:	2307      	movs	r3, #7
 8001004:	e006      	b.n	8001014 <HAL_GPIO_Init+0x204>
 8001006:	2303      	movs	r3, #3
 8001008:	e004      	b.n	8001014 <HAL_GPIO_Init+0x204>
 800100a:	2302      	movs	r3, #2
 800100c:	e002      	b.n	8001014 <HAL_GPIO_Init+0x204>
 800100e:	2301      	movs	r3, #1
 8001010:	e000      	b.n	8001014 <HAL_GPIO_Init+0x204>
 8001012:	2300      	movs	r3, #0
 8001014:	69fa      	ldr	r2, [r7, #28]
 8001016:	f002 0203 	and.w	r2, r2, #3
 800101a:	0092      	lsls	r2, r2, #2
 800101c:	4093      	lsls	r3, r2
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001024:	4935      	ldr	r1, [pc, #212]	@ (80010fc <HAL_GPIO_Init+0x2ec>)
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	089b      	lsrs	r3, r3, #2
 800102a:	3302      	adds	r3, #2
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001032:	4b38      	ldr	r3, [pc, #224]	@ (8001114 <HAL_GPIO_Init+0x304>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001056:	4a2f      	ldr	r2, [pc, #188]	@ (8001114 <HAL_GPIO_Init+0x304>)
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800105c:	4b2d      	ldr	r3, [pc, #180]	@ (8001114 <HAL_GPIO_Init+0x304>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001080:	4a24      	ldr	r2, [pc, #144]	@ (8001114 <HAL_GPIO_Init+0x304>)
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001086:	4b23      	ldr	r3, [pc, #140]	@ (8001114 <HAL_GPIO_Init+0x304>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	43db      	mvns	r3, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010aa:	4a1a      	ldr	r2, [pc, #104]	@ (8001114 <HAL_GPIO_Init+0x304>)
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010b0:	4b18      	ldr	r3, [pc, #96]	@ (8001114 <HAL_GPIO_Init+0x304>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001114 <HAL_GPIO_Init+0x304>)
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3301      	adds	r3, #1
 80010de:	61fb      	str	r3, [r7, #28]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	2b0f      	cmp	r3, #15
 80010e4:	f67f aea2 	bls.w	8000e2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	3724      	adds	r7, #36	@ 0x24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40013800 	.word	0x40013800
 8001100:	40020000 	.word	0x40020000
 8001104:	40020400 	.word	0x40020400
 8001108:	40020800 	.word	0x40020800
 800110c:	40020c00 	.word	0x40020c00
 8001110:	40021000 	.word	0x40021000
 8001114:	40013c00 	.word	0x40013c00

08001118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	807b      	strh	r3, [r7, #2]
 8001124:	4613      	mov	r3, r2
 8001126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001128:	787b      	ldrb	r3, [r7, #1]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800112e:	887a      	ldrh	r2, [r7, #2]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001134:	e003      	b.n	800113e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001136:	887b      	ldrh	r3, [r7, #2]
 8001138:	041a      	lsls	r2, r3, #16
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	619a      	str	r2, [r3, #24]
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e12b      	b.n	80013b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d106      	bne.n	8001178 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff fbc0 	bl	80008f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2224      	movs	r2, #36	@ 0x24
 800117c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 0201 	bic.w	r2, r2, #1
 800118e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800119e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80011ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80011b0:	f002 faa6 	bl	8003700 <HAL_RCC_GetPCLK1Freq>
 80011b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	4a81      	ldr	r2, [pc, #516]	@ (80013c0 <HAL_I2C_Init+0x274>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d807      	bhi.n	80011d0 <HAL_I2C_Init+0x84>
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4a80      	ldr	r2, [pc, #512]	@ (80013c4 <HAL_I2C_Init+0x278>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	bf94      	ite	ls
 80011c8:	2301      	movls	r3, #1
 80011ca:	2300      	movhi	r3, #0
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	e006      	b.n	80011de <HAL_I2C_Init+0x92>
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4a7d      	ldr	r2, [pc, #500]	@ (80013c8 <HAL_I2C_Init+0x27c>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	bf94      	ite	ls
 80011d8:	2301      	movls	r3, #1
 80011da:	2300      	movhi	r3, #0
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e0e7      	b.n	80013b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4a78      	ldr	r2, [pc, #480]	@ (80013cc <HAL_I2C_Init+0x280>)
 80011ea:	fba2 2303 	umull	r2, r3, r2, r3
 80011ee:	0c9b      	lsrs	r3, r3, #18
 80011f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	68ba      	ldr	r2, [r7, #8]
 8001202:	430a      	orrs	r2, r1
 8001204:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	4a6a      	ldr	r2, [pc, #424]	@ (80013c0 <HAL_I2C_Init+0x274>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d802      	bhi.n	8001220 <HAL_I2C_Init+0xd4>
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	3301      	adds	r3, #1
 800121e:	e009      	b.n	8001234 <HAL_I2C_Init+0xe8>
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001226:	fb02 f303 	mul.w	r3, r2, r3
 800122a:	4a69      	ldr	r2, [pc, #420]	@ (80013d0 <HAL_I2C_Init+0x284>)
 800122c:	fba2 2303 	umull	r2, r3, r2, r3
 8001230:	099b      	lsrs	r3, r3, #6
 8001232:	3301      	adds	r3, #1
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	6812      	ldr	r2, [r2, #0]
 8001238:	430b      	orrs	r3, r1
 800123a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001246:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	495c      	ldr	r1, [pc, #368]	@ (80013c0 <HAL_I2C_Init+0x274>)
 8001250:	428b      	cmp	r3, r1
 8001252:	d819      	bhi.n	8001288 <HAL_I2C_Init+0x13c>
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	1e59      	subs	r1, r3, #1
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001262:	1c59      	adds	r1, r3, #1
 8001264:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001268:	400b      	ands	r3, r1
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00a      	beq.n	8001284 <HAL_I2C_Init+0x138>
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	1e59      	subs	r1, r3, #1
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fbb1 f3f3 	udiv	r3, r1, r3
 800127c:	3301      	adds	r3, #1
 800127e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001282:	e051      	b.n	8001328 <HAL_I2C_Init+0x1dc>
 8001284:	2304      	movs	r3, #4
 8001286:	e04f      	b.n	8001328 <HAL_I2C_Init+0x1dc>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d111      	bne.n	80012b4 <HAL_I2C_Init+0x168>
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	1e58      	subs	r0, r3, #1
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6859      	ldr	r1, [r3, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	440b      	add	r3, r1
 800129e:	fbb0 f3f3 	udiv	r3, r0, r3
 80012a2:	3301      	adds	r3, #1
 80012a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	bf0c      	ite	eq
 80012ac:	2301      	moveq	r3, #1
 80012ae:	2300      	movne	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	e012      	b.n	80012da <HAL_I2C_Init+0x18e>
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	1e58      	subs	r0, r3, #1
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6859      	ldr	r1, [r3, #4]
 80012bc:	460b      	mov	r3, r1
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	0099      	lsls	r1, r3, #2
 80012c4:	440b      	add	r3, r1
 80012c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80012ca:	3301      	adds	r3, #1
 80012cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	bf0c      	ite	eq
 80012d4:	2301      	moveq	r3, #1
 80012d6:	2300      	movne	r3, #0
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_I2C_Init+0x196>
 80012de:	2301      	movs	r3, #1
 80012e0:	e022      	b.n	8001328 <HAL_I2C_Init+0x1dc>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10e      	bne.n	8001308 <HAL_I2C_Init+0x1bc>
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	1e58      	subs	r0, r3, #1
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6859      	ldr	r1, [r3, #4]
 80012f2:	460b      	mov	r3, r1
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	440b      	add	r3, r1
 80012f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80012fc:	3301      	adds	r3, #1
 80012fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001302:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001306:	e00f      	b.n	8001328 <HAL_I2C_Init+0x1dc>
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	1e58      	subs	r0, r3, #1
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6859      	ldr	r1, [r3, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	440b      	add	r3, r1
 8001316:	0099      	lsls	r1, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	fbb0 f3f3 	udiv	r3, r0, r3
 800131e:	3301      	adds	r3, #1
 8001320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001324:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	6809      	ldr	r1, [r1, #0]
 800132c:	4313      	orrs	r3, r2
 800132e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69da      	ldr	r2, [r3, #28]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a1b      	ldr	r3, [r3, #32]
 8001342:	431a      	orrs	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	430a      	orrs	r2, r1
 800134a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001356:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	6911      	ldr	r1, [r2, #16]
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68d2      	ldr	r2, [r2, #12]
 8001362:	4311      	orrs	r1, r2
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	6812      	ldr	r2, [r2, #0]
 8001368:	430b      	orrs	r3, r1
 800136a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	695a      	ldr	r2, [r3, #20]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	431a      	orrs	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	430a      	orrs	r2, r1
 8001386:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f042 0201 	orr.w	r2, r2, #1
 8001396:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2220      	movs	r2, #32
 80013a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	000186a0 	.word	0x000186a0
 80013c4:	001e847f 	.word	0x001e847f
 80013c8:	003d08ff 	.word	0x003d08ff
 80013cc:	431bde83 	.word	0x431bde83
 80013d0:	10624dd3 	.word	0x10624dd3

080013d4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013e6:	2b80      	cmp	r3, #128	@ 0x80
 80013e8:	d103      	bne.n	80013f2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  }
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80013fe:	b480      	push	{r7}
 8001400:	b087      	sub	sp, #28
 8001402:	af00      	add	r7, sp, #0
 8001404:	60f8      	str	r0, [r7, #12]
 8001406:	60b9      	str	r1, [r7, #8]
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	4613      	mov	r3, r2
 800140c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001414:	b2db      	uxtb	r3, r3
 8001416:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800141a:	2b28      	cmp	r3, #40	@ 0x28
 800141c:	d15b      	bne.n	80014d6 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d002      	beq.n	800142a <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e054      	b.n	80014d8 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001434:	2b01      	cmp	r3, #1
 8001436:	d101      	bne.n	800143c <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8001438:	2302      	movs	r3, #2
 800143a:	e04d      	b.n	80014d8 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b01      	cmp	r3, #1
 8001450:	d007      	beq.n	8001462 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f042 0201 	orr.w	r2, r2, #1
 8001460:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001470:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	222a      	movs	r2, #42	@ 0x2a
 8001476:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2220      	movs	r2, #32
 800147e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2200      	movs	r2, #0
 8001486:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	88fa      	ldrh	r2, [r7, #6]
 8001492:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001498:	b29a      	uxth	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80014d0:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	e000      	b.n	80014d8 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 80014d6:	2302      	movs	r3, #2
  }
}
 80014d8:	4618      	mov	r0, r3
 80014da:	371c      	adds	r7, #28
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b20      	cmp	r3, #32
 80014f6:	d124      	bne.n	8001542 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2228      	movs	r2, #40	@ 0x28
 80014fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b01      	cmp	r3, #1
 800150c:	d007      	beq.n	800151e <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f042 0201 	orr.w	r2, r2, #1
 800151c:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800152c:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800153c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800153e:	2300      	movs	r3, #0
 8001540:	e000      	b.n	8001544 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8001542:	2302      	movs	r3, #2
  }
}
 8001544:	4618      	mov	r0, r3
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001558:	2300      	movs	r3, #0
 800155a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001568:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001570:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001578:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	2b10      	cmp	r3, #16
 800157e:	d003      	beq.n	8001588 <HAL_I2C_EV_IRQHandler+0x38>
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	2b40      	cmp	r3, #64	@ 0x40
 8001584:	f040 80b1 	bne.w	80016ea <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10d      	bne.n	80015be <HAL_I2C_EV_IRQHandler+0x6e>
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80015a8:	d003      	beq.n	80015b2 <HAL_I2C_EV_IRQHandler+0x62>
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80015b0:	d101      	bne.n	80015b6 <HAL_I2C_EV_IRQHandler+0x66>
 80015b2:	2301      	movs	r3, #1
 80015b4:	e000      	b.n	80015b8 <HAL_I2C_EV_IRQHandler+0x68>
 80015b6:	2300      	movs	r3, #0
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	f000 8114 	beq.w	80017e6 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d00b      	beq.n	80015e0 <HAL_I2C_EV_IRQHandler+0x90>
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d006      	beq.n	80015e0 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f001 fc48 	bl	8002e68 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 fd4e 	bl	800207a <I2C_Master_SB>
 80015de:	e083      	b.n	80016e8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d008      	beq.n	80015fc <HAL_I2C_EV_IRQHandler+0xac>
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 fdc6 	bl	8002186 <I2C_Master_ADD10>
 80015fa:	e075      	b.n	80016e8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d008      	beq.n	8001618 <HAL_I2C_EV_IRQHandler+0xc8>
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f000 fde2 	bl	80021da <I2C_Master_ADDR>
 8001616:	e067      	b.n	80016e8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	2b00      	cmp	r3, #0
 8001620:	d036      	beq.n	8001690 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800162c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001630:	f000 80db 	beq.w	80017ea <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00d      	beq.n	800165a <HAL_I2C_EV_IRQHandler+0x10a>
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001644:	2b00      	cmp	r3, #0
 8001646:	d008      	beq.n	800165a <HAL_I2C_EV_IRQHandler+0x10a>
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f003 0304 	and.w	r3, r3, #4
 800164e:	2b00      	cmp	r3, #0
 8001650:	d103      	bne.n	800165a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 f9aa 	bl	80019ac <I2C_MasterTransmit_TXE>
 8001658:	e046      	b.n	80016e8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 80c2 	beq.w	80017ea <HAL_I2C_EV_IRQHandler+0x29a>
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 80bc 	beq.w	80017ea <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001672:	7bbb      	ldrb	r3, [r7, #14]
 8001674:	2b21      	cmp	r3, #33	@ 0x21
 8001676:	d103      	bne.n	8001680 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 fa33 	bl	8001ae4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800167e:	e0b4      	b.n	80017ea <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	2b40      	cmp	r3, #64	@ 0x40
 8001684:	f040 80b1 	bne.w	80017ea <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 faa1 	bl	8001bd0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800168e:	e0ac      	b.n	80017ea <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800169a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800169e:	f000 80a4 	beq.w	80017ea <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00d      	beq.n	80016c8 <HAL_I2C_EV_IRQHandler+0x178>
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d008      	beq.n	80016c8 <HAL_I2C_EV_IRQHandler+0x178>
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d103      	bne.n	80016c8 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 fb1d 	bl	8001d00 <I2C_MasterReceive_RXNE>
 80016c6:	e00f      	b.n	80016e8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f003 0304 	and.w	r3, r3, #4
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 808b 	beq.w	80017ea <HAL_I2C_EV_IRQHandler+0x29a>
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 8085 	beq.w	80017ea <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 fbd5 	bl	8001e90 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016e6:	e080      	b.n	80017ea <HAL_I2C_EV_IRQHandler+0x29a>
 80016e8:	e07f      	b.n	80017ea <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d004      	beq.n	80016fc <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	61fb      	str	r3, [r7, #28]
 80016fa:	e007      	b.n	800170c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d011      	beq.n	800173a <HAL_I2C_EV_IRQHandler+0x1ea>
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00c      	beq.n	800173a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001730:	69b9      	ldr	r1, [r7, #24]
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 ffa0 	bl	8002678 <I2C_Slave_ADDR>
 8001738:	e05a      	b.n	80017f0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	f003 0310 	and.w	r3, r3, #16
 8001740:	2b00      	cmp	r3, #0
 8001742:	d008      	beq.n	8001756 <HAL_I2C_EV_IRQHandler+0x206>
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 ffda 	bl	8002708 <I2C_Slave_STOPF>
 8001754:	e04c      	b.n	80017f0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001756:	7bbb      	ldrb	r3, [r7, #14]
 8001758:	2b21      	cmp	r3, #33	@ 0x21
 800175a:	d002      	beq.n	8001762 <HAL_I2C_EV_IRQHandler+0x212>
 800175c:	7bbb      	ldrb	r3, [r7, #14]
 800175e:	2b29      	cmp	r3, #41	@ 0x29
 8001760:	d120      	bne.n	80017a4 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001768:	2b00      	cmp	r3, #0
 800176a:	d00d      	beq.n	8001788 <HAL_I2C_EV_IRQHandler+0x238>
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001772:	2b00      	cmp	r3, #0
 8001774:	d008      	beq.n	8001788 <HAL_I2C_EV_IRQHandler+0x238>
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	d103      	bne.n	8001788 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 febb 	bl	80024fc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001786:	e032      	b.n	80017ee <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	2b00      	cmp	r3, #0
 8001790:	d02d      	beq.n	80017ee <HAL_I2C_EV_IRQHandler+0x29e>
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001798:	2b00      	cmp	r3, #0
 800179a:	d028      	beq.n	80017ee <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 feea 	bl	8002576 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017a2:	e024      	b.n	80017ee <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00d      	beq.n	80017ca <HAL_I2C_EV_IRQHandler+0x27a>
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d008      	beq.n	80017ca <HAL_I2C_EV_IRQHandler+0x27a>
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d103      	bne.n	80017ca <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 fef8 	bl	80025b8 <I2C_SlaveReceive_RXNE>
 80017c8:	e012      	b.n	80017f0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d00d      	beq.n	80017f0 <HAL_I2C_EV_IRQHandler+0x2a0>
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d008      	beq.n	80017f0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 ff28 	bl	8002634 <I2C_SlaveReceive_BTF>
 80017e4:	e004      	b.n	80017f0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80017e6:	bf00      	nop
 80017e8:	e002      	b.n	80017f0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017ea:	bf00      	nop
 80017ec:	e000      	b.n	80017f0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017ee:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80017f0:	3720      	adds	r7, #32
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b08a      	sub	sp, #40	@ 0x28
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800180e:	2300      	movs	r3, #0
 8001810:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001818:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800181a:	6a3b      	ldr	r3, [r7, #32]
 800181c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00d      	beq.n	8001840 <HAL_I2C_ER_IRQHandler+0x4a>
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800182a:	2b00      	cmp	r3, #0
 800182c:	d008      	beq.n	8001840 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800182e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800183e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001840:	6a3b      	ldr	r3, [r7, #32]
 8001842:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00d      	beq.n	8001866 <HAL_I2C_ER_IRQHandler+0x70>
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001850:	2b00      	cmp	r3, #0
 8001852:	d008      	beq.n	8001866 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001856:	f043 0302 	orr.w	r3, r3, #2
 800185a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8001864:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800186c:	2b00      	cmp	r3, #0
 800186e:	d03e      	beq.n	80018ee <HAL_I2C_ER_IRQHandler+0xf8>
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001876:	2b00      	cmp	r3, #0
 8001878:	d039      	beq.n	80018ee <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800187a:	7efb      	ldrb	r3, [r7, #27]
 800187c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001882:	b29b      	uxth	r3, r3
 8001884:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800188c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001894:	7ebb      	ldrb	r3, [r7, #26]
 8001896:	2b20      	cmp	r3, #32
 8001898:	d112      	bne.n	80018c0 <HAL_I2C_ER_IRQHandler+0xca>
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d10f      	bne.n	80018c0 <HAL_I2C_ER_IRQHandler+0xca>
 80018a0:	7cfb      	ldrb	r3, [r7, #19]
 80018a2:	2b21      	cmp	r3, #33	@ 0x21
 80018a4:	d008      	beq.n	80018b8 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80018a6:	7cfb      	ldrb	r3, [r7, #19]
 80018a8:	2b29      	cmp	r3, #41	@ 0x29
 80018aa:	d005      	beq.n	80018b8 <HAL_I2C_ER_IRQHandler+0xc2>
 80018ac:	7cfb      	ldrb	r3, [r7, #19]
 80018ae:	2b28      	cmp	r3, #40	@ 0x28
 80018b0:	d106      	bne.n	80018c0 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2b21      	cmp	r3, #33	@ 0x21
 80018b6:	d103      	bne.n	80018c0 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f001 f855 	bl	8002968 <I2C_Slave_AF>
 80018be:	e016      	b.n	80018ee <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80018c8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80018ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018cc:	f043 0304 	orr.w	r3, r3, #4
 80018d0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80018d2:	7efb      	ldrb	r3, [r7, #27]
 80018d4:	2b10      	cmp	r3, #16
 80018d6:	d002      	beq.n	80018de <HAL_I2C_ER_IRQHandler+0xe8>
 80018d8:	7efb      	ldrb	r3, [r7, #27]
 80018da:	2b40      	cmp	r3, #64	@ 0x40
 80018dc:	d107      	bne.n	80018ee <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018ec:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80018ee:	6a3b      	ldr	r3, [r7, #32]
 80018f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00d      	beq.n	8001914 <HAL_I2C_ER_IRQHandler+0x11e>
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d008      	beq.n	8001914 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001904:	f043 0308 	orr.w	r3, r3, #8
 8001908:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8001912:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001916:	2b00      	cmp	r3, #0
 8001918:	d008      	beq.n	800192c <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800191e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001920:	431a      	orrs	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f001 f892 	bl	8002a50 <I2C_ITError>
  }
}
 800192c:	bf00      	nop
 800192e:	3728      	adds	r7, #40	@ 0x28
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019ba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80019c2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d150      	bne.n	8001a74 <I2C_MasterTransmit_TXE+0xc8>
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	2b21      	cmp	r3, #33	@ 0x21
 80019d6:	d14d      	bne.n	8001a74 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	2b08      	cmp	r3, #8
 80019dc:	d01d      	beq.n	8001a1a <I2C_MasterTransmit_TXE+0x6e>
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	2b20      	cmp	r3, #32
 80019e2:	d01a      	beq.n	8001a1a <I2C_MasterTransmit_TXE+0x6e>
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80019ea:	d016      	beq.n	8001a1a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80019fa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2211      	movs	r2, #17
 8001a00:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2220      	movs	r2, #32
 8001a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ff8e 	bl	8001934 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a18:	e060      	b.n	8001adc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001a28:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a38:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2220      	movs	r2, #32
 8001a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b40      	cmp	r3, #64	@ 0x40
 8001a52:	d107      	bne.n	8001a64 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ff87 	bl	8001970 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a62:	e03b      	b.n	8001adc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ff61 	bl	8001934 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a72:	e033      	b.n	8001adc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	2b21      	cmp	r3, #33	@ 0x21
 8001a78:	d005      	beq.n	8001a86 <I2C_MasterTransmit_TXE+0xda>
 8001a7a:	7bbb      	ldrb	r3, [r7, #14]
 8001a7c:	2b40      	cmp	r3, #64	@ 0x40
 8001a7e:	d12d      	bne.n	8001adc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	2b22      	cmp	r3, #34	@ 0x22
 8001a84:	d12a      	bne.n	8001adc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d108      	bne.n	8001aa2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a9e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001aa0:	e01c      	b.n	8001adc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b40      	cmp	r3, #64	@ 0x40
 8001aac:	d103      	bne.n	8001ab6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f88e 	bl	8001bd0 <I2C_MemoryTransmit_TXE_BTF>
}
 8001ab4:	e012      	b.n	8001adc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aba:	781a      	ldrb	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001ada:	e7ff      	b.n	8001adc <I2C_MasterTransmit_TXE+0x130>
 8001adc:	bf00      	nop
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b21      	cmp	r3, #33	@ 0x21
 8001afc:	d164      	bne.n	8001bc8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d012      	beq.n	8001b2e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0c:	781a      	ldrb	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b18:	1c5a      	adds	r2, r3, #1
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	3b01      	subs	r3, #1
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001b2c:	e04c      	b.n	8001bc8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d01d      	beq.n	8001b70 <I2C_MasterTransmit_BTF+0x8c>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2b20      	cmp	r3, #32
 8001b38:	d01a      	beq.n	8001b70 <I2C_MasterTransmit_BTF+0x8c>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001b40:	d016      	beq.n	8001b70 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001b50:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2211      	movs	r2, #17
 8001b56:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2220      	movs	r2, #32
 8001b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff fee3 	bl	8001934 <HAL_I2C_MasterTxCpltCallback>
}
 8001b6e:	e02b      	b.n	8001bc8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001b7e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b8e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2220      	movs	r2, #32
 8001b9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b40      	cmp	r3, #64	@ 0x40
 8001ba8:	d107      	bne.n	8001bba <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff fedc 	bl	8001970 <HAL_I2C_MemTxCpltCallback>
}
 8001bb8:	e006      	b.n	8001bc8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff feb6 	bl	8001934 <HAL_I2C_MasterTxCpltCallback>
}
 8001bc8:	bf00      	nop
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bde:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d11d      	bne.n	8001c24 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d10b      	bne.n	8001c08 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c00:	1c9a      	adds	r2, r3, #2
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001c06:	e077      	b.n	8001cf8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	121b      	asrs	r3, r3, #8
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001c22:	e069      	b.n	8001cf8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d10b      	bne.n	8001c44 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c3c:	1c5a      	adds	r2, r3, #1
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001c42:	e059      	b.n	8001cf8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d152      	bne.n	8001cf2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	2b22      	cmp	r3, #34	@ 0x22
 8001c50:	d10d      	bne.n	8001c6e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c60:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001c6c:	e044      	b.n	8001cf8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d015      	beq.n	8001ca4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	2b21      	cmp	r3, #33	@ 0x21
 8001c7c:	d112      	bne.n	8001ca4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c82:	781a      	ldrb	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8e:	1c5a      	adds	r2, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001ca2:	e029      	b.n	8001cf8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d124      	bne.n	8001cf8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	2b21      	cmp	r3, #33	@ 0x21
 8001cb2:	d121      	bne.n	8001cf8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001cc2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cd2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2220      	movs	r2, #32
 8001cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff fe40 	bl	8001970 <HAL_I2C_MemTxCpltCallback>
}
 8001cf0:	e002      	b.n	8001cf8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff fb6e 	bl	80013d4 <I2C_Flush_DR>
}
 8001cf8:	bf00      	nop
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b22      	cmp	r3, #34	@ 0x22
 8001d12:	f040 80b9 	bne.w	8001e88 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d1a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	d921      	bls.n	8001d6e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3c:	1c5a      	adds	r2, r3, #1
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	2b03      	cmp	r3, #3
 8001d58:	f040 8096 	bne.w	8001e88 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d6a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001d6c:	e08c      	b.n	8001e88 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d07f      	beq.n	8001e76 <I2C_MasterReceive_RXNE+0x176>
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d002      	beq.n	8001d82 <I2C_MasterReceive_RXNE+0x82>
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d179      	bne.n	8001e76 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f001 f83e 	bl	8002e04 <I2C_WaitOnSTOPRequestThroughIT>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d14c      	bne.n	8001e28 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d9c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001dac:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc0:	1c5a      	adds	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b40      	cmp	r3, #64	@ 0x40
 8001de6:	d10a      	bne.n	8001dfe <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff fdc4 	bl	8001984 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001dfc:	e044      	b.n	8001e88 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d002      	beq.n	8001e12 <I2C_MasterReceive_RXNE+0x112>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2b20      	cmp	r3, #32
 8001e10:	d103      	bne.n	8001e1a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e18:	e002      	b.n	8001e20 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2212      	movs	r2, #18
 8001e1e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff fd91 	bl	8001948 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001e26:	e02f      	b.n	8001e88 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001e36:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	691a      	ldr	r2, [r3, #16]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	3b01      	subs	r3, #1
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2220      	movs	r2, #32
 8001e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7fe fc06 	bl	8000680 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001e74:	e008      	b.n	8001e88 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e84:	605a      	str	r2, [r3, #4]
}
 8001e86:	e7ff      	b.n	8001e88 <I2C_MasterReceive_RXNE+0x188>
 8001e88:	bf00      	nop
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e9c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d11b      	bne.n	8001ee0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001eb6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691a      	ldr	r2, [r3, #16]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001ede:	e0c8      	b.n	8002072 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	d129      	bne.n	8001f3e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ef8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d00a      	beq.n	8001f16 <I2C_MasterReceive_BTF+0x86>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d007      	beq.n	8001f16 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f14:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	691a      	ldr	r2, [r3, #16]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f28:	1c5a      	adds	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	3b01      	subs	r3, #1
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001f3c:	e099      	b.n	8002072 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	f040 8081 	bne.w	800204c <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d002      	beq.n	8001f56 <I2C_MasterReceive_BTF+0xc6>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b10      	cmp	r3, #16
 8001f54:	d108      	bne.n	8001f68 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	e019      	b.n	8001f9c <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d002      	beq.n	8001f74 <I2C_MasterReceive_BTF+0xe4>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d108      	bne.n	8001f86 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	e00a      	b.n	8001f9c <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2b10      	cmp	r3, #16
 8001f8a:	d007      	beq.n	8001f9c <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f9a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	691a      	ldr	r2, [r3, #16]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fae:	1c5a      	adds	r2, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	691a      	ldr	r2, [r3, #16]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001ff6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b40      	cmp	r3, #64	@ 0x40
 800200a:	d10a      	bne.n	8002022 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff fcb2 	bl	8001984 <HAL_I2C_MemRxCpltCallback>
}
 8002020:	e027      	b.n	8002072 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2b08      	cmp	r3, #8
 800202e:	d002      	beq.n	8002036 <I2C_MasterReceive_BTF+0x1a6>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2b20      	cmp	r3, #32
 8002034:	d103      	bne.n	800203e <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	631a      	str	r2, [r3, #48]	@ 0x30
 800203c:	e002      	b.n	8002044 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2212      	movs	r2, #18
 8002042:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff fc7f 	bl	8001948 <HAL_I2C_MasterRxCpltCallback>
}
 800204a:	e012      	b.n	8002072 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	691a      	ldr	r2, [r3, #16]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002068:	b29b      	uxth	r3, r3
 800206a:	3b01      	subs	r3, #1
 800206c:	b29a      	uxth	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002072:	bf00      	nop
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b40      	cmp	r3, #64	@ 0x40
 800208c:	d117      	bne.n	80020be <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002092:	2b00      	cmp	r3, #0
 8002094:	d109      	bne.n	80020aa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209a:	b2db      	uxtb	r3, r3
 800209c:	461a      	mov	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80020a6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80020a8:	e067      	b.n	800217a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	611a      	str	r2, [r3, #16]
}
 80020bc:	e05d      	b.n	800217a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80020c6:	d133      	bne.n	8002130 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b21      	cmp	r3, #33	@ 0x21
 80020d2:	d109      	bne.n	80020e8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	461a      	mov	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80020e4:	611a      	str	r2, [r3, #16]
 80020e6:	e008      	b.n	80020fa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d004      	beq.n	800210c <I2C_Master_SB+0x92>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002108:	2b00      	cmp	r3, #0
 800210a:	d108      	bne.n	800211e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002110:	2b00      	cmp	r3, #0
 8002112:	d032      	beq.n	800217a <I2C_Master_SB+0x100>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800211a:	2b00      	cmp	r3, #0
 800211c:	d02d      	beq.n	800217a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800212c:	605a      	str	r2, [r3, #4]
}
 800212e:	e024      	b.n	800217a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10e      	bne.n	8002156 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213c:	b29b      	uxth	r3, r3
 800213e:	11db      	asrs	r3, r3, #7
 8002140:	b2db      	uxtb	r3, r3
 8002142:	f003 0306 	and.w	r3, r3, #6
 8002146:	b2db      	uxtb	r3, r3
 8002148:	f063 030f 	orn	r3, r3, #15
 800214c:	b2da      	uxtb	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	611a      	str	r2, [r3, #16]
}
 8002154:	e011      	b.n	800217a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800215a:	2b01      	cmp	r3, #1
 800215c:	d10d      	bne.n	800217a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002162:	b29b      	uxth	r3, r3
 8002164:	11db      	asrs	r3, r3, #7
 8002166:	b2db      	uxtb	r3, r3
 8002168:	f003 0306 	and.w	r3, r3, #6
 800216c:	b2db      	uxtb	r3, r3
 800216e:	f063 030e 	orn	r3, r3, #14
 8002172:	b2da      	uxtb	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	611a      	str	r2, [r3, #16]
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002192:	b2da      	uxtb	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d004      	beq.n	80021ac <I2C_Master_ADD10+0x26>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d108      	bne.n	80021be <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00c      	beq.n	80021ce <I2C_Master_ADD10+0x48>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d007      	beq.n	80021ce <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021cc:	605a      	str	r2, [r3, #4]
  }
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80021da:	b480      	push	{r7}
 80021dc:	b091      	sub	sp, #68	@ 0x44
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80021e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b22      	cmp	r3, #34	@ 0x22
 8002202:	f040 8169 	bne.w	80024d8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10f      	bne.n	800222e <I2C_Master_ADDR+0x54>
 800220e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002212:	2b40      	cmp	r3, #64	@ 0x40
 8002214:	d10b      	bne.n	800222e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002216:	2300      	movs	r3, #0
 8002218:	633b      	str	r3, [r7, #48]	@ 0x30
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	633b      	str	r3, [r7, #48]	@ 0x30
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	633b      	str	r3, [r7, #48]	@ 0x30
 800222a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800222c:	e160      	b.n	80024f0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002232:	2b00      	cmp	r3, #0
 8002234:	d11d      	bne.n	8002272 <I2C_Master_ADDR+0x98>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800223e:	d118      	bne.n	8002272 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002240:	2300      	movs	r3, #0
 8002242:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002264:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002270:	e13e      	b.n	80024f0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002276:	b29b      	uxth	r3, r3
 8002278:	2b00      	cmp	r3, #0
 800227a:	d113      	bne.n	80022a4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800227c:	2300      	movs	r3, #0
 800227e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002290:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	e115      	b.n	80024d0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	f040 808a 	bne.w	80023c4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80022b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022b2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80022b6:	d137      	bne.n	8002328 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022c6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80022d6:	d113      	bne.n	8002300 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022e6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022e8:	2300      	movs	r3, #0
 80022ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80022fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fe:	e0e7      	b.n	80024d0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002300:	2300      	movs	r3, #0
 8002302:	623b      	str	r3, [r7, #32]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	623b      	str	r3, [r7, #32]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	623b      	str	r3, [r7, #32]
 8002314:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	e0d3      	b.n	80024d0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800232a:	2b08      	cmp	r3, #8
 800232c:	d02e      	beq.n	800238c <I2C_Master_ADDR+0x1b2>
 800232e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002330:	2b20      	cmp	r3, #32
 8002332:	d02b      	beq.n	800238c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002336:	2b12      	cmp	r3, #18
 8002338:	d102      	bne.n	8002340 <I2C_Master_ADDR+0x166>
 800233a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800233c:	2b01      	cmp	r3, #1
 800233e:	d125      	bne.n	800238c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002342:	2b04      	cmp	r3, #4
 8002344:	d00e      	beq.n	8002364 <I2C_Master_ADDR+0x18a>
 8002346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002348:	2b02      	cmp	r3, #2
 800234a:	d00b      	beq.n	8002364 <I2C_Master_ADDR+0x18a>
 800234c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800234e:	2b10      	cmp	r3, #16
 8002350:	d008      	beq.n	8002364 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	e007      	b.n	8002374 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002372:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002374:	2300      	movs	r3, #0
 8002376:	61fb      	str	r3, [r7, #28]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	61fb      	str	r3, [r7, #28]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	61fb      	str	r3, [r7, #28]
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	e0a1      	b.n	80024d0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800239a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800239c:	2300      	movs	r3, #0
 800239e:	61bb      	str	r3, [r7, #24]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	61bb      	str	r3, [r7, #24]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	61bb      	str	r3, [r7, #24]
 80023b0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	e085      	b.n	80024d0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d14d      	bne.n	800246a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80023ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023d0:	2b04      	cmp	r3, #4
 80023d2:	d016      	beq.n	8002402 <I2C_Master_ADDR+0x228>
 80023d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d013      	beq.n	8002402 <I2C_Master_ADDR+0x228>
 80023da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023dc:	2b10      	cmp	r3, #16
 80023de:	d010      	beq.n	8002402 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023ee:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	e007      	b.n	8002412 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002410:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800241c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002420:	d117      	bne.n	8002452 <I2C_Master_ADDR+0x278>
 8002422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002424:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002428:	d00b      	beq.n	8002442 <I2C_Master_ADDR+0x268>
 800242a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800242c:	2b01      	cmp	r3, #1
 800242e:	d008      	beq.n	8002442 <I2C_Master_ADDR+0x268>
 8002430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002432:	2b08      	cmp	r3, #8
 8002434:	d005      	beq.n	8002442 <I2C_Master_ADDR+0x268>
 8002436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002438:	2b10      	cmp	r3, #16
 800243a:	d002      	beq.n	8002442 <I2C_Master_ADDR+0x268>
 800243c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800243e:	2b20      	cmp	r3, #32
 8002440:	d107      	bne.n	8002452 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002450:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	e032      	b.n	80024d0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002478:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002484:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002488:	d117      	bne.n	80024ba <I2C_Master_ADDR+0x2e0>
 800248a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800248c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002490:	d00b      	beq.n	80024aa <I2C_Master_ADDR+0x2d0>
 8002492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002494:	2b01      	cmp	r3, #1
 8002496:	d008      	beq.n	80024aa <I2C_Master_ADDR+0x2d0>
 8002498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800249a:	2b08      	cmp	r3, #8
 800249c:	d005      	beq.n	80024aa <I2C_Master_ADDR+0x2d0>
 800249e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024a0:	2b10      	cmp	r3, #16
 80024a2:	d002      	beq.n	80024aa <I2C_Master_ADDR+0x2d0>
 80024a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024a6:	2b20      	cmp	r3, #32
 80024a8:	d107      	bne.n	80024ba <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80024b8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80024d6:	e00b      	b.n	80024f0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
}
 80024ee:	e7ff      	b.n	80024f0 <I2C_Master_ADDR+0x316>
 80024f0:	bf00      	nop
 80024f2:	3744      	adds	r7, #68	@ 0x44
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800250a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002510:	b29b      	uxth	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d02b      	beq.n	800256e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251a:	781a      	ldrb	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002530:	b29b      	uxth	r3, r3
 8002532:	3b01      	subs	r3, #1
 8002534:	b29a      	uxth	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800253e:	b29b      	uxth	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d114      	bne.n	800256e <I2C_SlaveTransmit_TXE+0x72>
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	2b29      	cmp	r3, #41	@ 0x29
 8002548:	d111      	bne.n	800256e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002558:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2221      	movs	r2, #33	@ 0x21
 800255e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2228      	movs	r2, #40	@ 0x28
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff f9f7 	bl	800195c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002582:	b29b      	uxth	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	d011      	beq.n	80025ac <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258c:	781a      	ldrb	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d02c      	beq.n	800262c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d114      	bne.n	800262c <I2C_SlaveReceive_RXNE+0x74>
 8002602:	7bfb      	ldrb	r3, [r7, #15]
 8002604:	2b2a      	cmp	r3, #42	@ 0x2a
 8002606:	d111      	bne.n	800262c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002616:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2222      	movs	r2, #34	@ 0x22
 800261c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2228      	movs	r2, #40	@ 0x28
 8002622:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7fd ff86 	bl	8000538 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800262c:	bf00      	nop
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002640:	b29b      	uxth	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d012      	beq.n	800266c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002662:	b29b      	uxth	r3, r3
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002682:	2300      	movs	r3, #0
 8002684:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800268c:	b2db      	uxtb	r3, r3
 800268e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002692:	2b28      	cmp	r3, #40	@ 0x28
 8002694:	d125      	bne.n	80026e2 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026a4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80026b0:	2301      	movs	r3, #1
 80026b2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d103      	bne.n	80026c6 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	81bb      	strh	r3, [r7, #12]
 80026c4:	e002      	b.n	80026cc <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80026d4:	89ba      	ldrh	r2, [r7, #12]
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	4619      	mov	r1, r3
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7fd fefe 	bl	80004dc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80026e0:	e00e      	b.n	8002700 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e2:	2300      	movs	r3, #0
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002700:	bf00      	nop
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002716:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002726:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002728:	2300      	movs	r3, #0
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	60bb      	str	r3, [r7, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002754:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002760:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002764:	d172      	bne.n	800284c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	2b22      	cmp	r3, #34	@ 0x22
 800276a:	d002      	beq.n	8002772 <I2C_Slave_STOPF+0x6a>
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002770:	d135      	bne.n	80027de <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	b29a      	uxth	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002784:	b29b      	uxth	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d005      	beq.n	8002796 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278e:	f043 0204 	orr.w	r2, r3, #4
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027a4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fe fb21 	bl	8000df2 <HAL_DMA_GetState>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d049      	beq.n	800284a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ba:	4a69      	ldr	r2, [pc, #420]	@ (8002960 <I2C_Slave_STOPF+0x258>)
 80027bc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fe faf3 	bl	8000dae <HAL_DMA_Abort_IT>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d03d      	beq.n	800284a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80027d8:	4610      	mov	r0, r2
 80027da:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80027dc:	e035      	b.n	800284a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d005      	beq.n	8002802 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fa:	f043 0204 	orr.w	r2, r3, #4
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002810:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002816:	4618      	mov	r0, r3
 8002818:	f7fe faeb 	bl	8000df2 <HAL_DMA_GetState>
 800281c:	4603      	mov	r3, r0
 800281e:	2b01      	cmp	r3, #1
 8002820:	d014      	beq.n	800284c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002826:	4a4e      	ldr	r2, [pc, #312]	@ (8002960 <I2C_Slave_STOPF+0x258>)
 8002828:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800282e:	4618      	mov	r0, r3
 8002830:	f7fe fabd 	bl	8000dae <HAL_DMA_Abort_IT>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d008      	beq.n	800284c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800283e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002844:	4610      	mov	r0, r2
 8002846:	4798      	blx	r3
 8002848:	e000      	b.n	800284c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800284a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002850:	b29b      	uxth	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d03e      	beq.n	80028d4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b04      	cmp	r3, #4
 8002862:	d112      	bne.n	800288a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691a      	ldr	r2, [r3, #16]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002876:	1c5a      	adds	r2, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002880:	b29b      	uxth	r3, r3
 8002882:	3b01      	subs	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002894:	2b40      	cmp	r3, #64	@ 0x40
 8002896:	d112      	bne.n	80028be <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	691a      	ldr	r2, [r3, #16]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028cc:	f043 0204 	orr.w	r2, r3, #4
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f8b7 	bl	8002a50 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80028e2:	e039      	b.n	8002958 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
 80028e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80028e8:	d109      	bne.n	80028fe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2228      	movs	r2, #40	@ 0x28
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7fd fe1d 	bl	8000538 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b28      	cmp	r3, #40	@ 0x28
 8002908:	d111      	bne.n	800292e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a15      	ldr	r2, [pc, #84]	@ (8002964 <I2C_Slave_STOPF+0x25c>)
 800290e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2220      	movs	r2, #32
 800291a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7fd fdcc 	bl	80004c4 <HAL_I2C_ListenCpltCallback>
}
 800292c:	e014      	b.n	8002958 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	2b22      	cmp	r3, #34	@ 0x22
 8002934:	d002      	beq.n	800293c <I2C_Slave_STOPF+0x234>
 8002936:	7bfb      	ldrb	r3, [r7, #15]
 8002938:	2b22      	cmp	r3, #34	@ 0x22
 800293a:	d10d      	bne.n	8002958 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2220      	movs	r2, #32
 8002946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7fd fdf0 	bl	8000538 <HAL_I2C_SlaveRxCpltCallback>
}
 8002958:	bf00      	nop
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	08002cb5 	.word	0x08002cb5
 8002964:	ffff0000 	.word	0xffff0000

08002968 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002976:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b08      	cmp	r3, #8
 8002982:	d002      	beq.n	800298a <I2C_Slave_AF+0x22>
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b20      	cmp	r3, #32
 8002988:	d129      	bne.n	80029de <I2C_Slave_AF+0x76>
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	2b28      	cmp	r3, #40	@ 0x28
 800298e:	d126      	bne.n	80029de <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a2e      	ldr	r2, [pc, #184]	@ (8002a4c <I2C_Slave_AF+0xe4>)
 8002994:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80029a4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80029ae:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029be:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2220      	movs	r2, #32
 80029ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7fd fd74 	bl	80004c4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80029dc:	e031      	b.n	8002a42 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	2b21      	cmp	r3, #33	@ 0x21
 80029e2:	d129      	bne.n	8002a38 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a19      	ldr	r2, [pc, #100]	@ (8002a4c <I2C_Slave_AF+0xe4>)
 80029e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2221      	movs	r2, #33	@ 0x21
 80029ee:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002a0e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a18:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a28:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7fe fcd2 	bl	80013d4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7fe ff93 	bl	800195c <HAL_I2C_SlaveTxCpltCallback>
}
 8002a36:	e004      	b.n	8002a42 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a40:	615a      	str	r2, [r3, #20]
}
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	ffff0000 	.word	0xffff0000

08002a50 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a5e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a66:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002a68:	7bbb      	ldrb	r3, [r7, #14]
 8002a6a:	2b10      	cmp	r3, #16
 8002a6c:	d002      	beq.n	8002a74 <I2C_ITError+0x24>
 8002a6e:	7bbb      	ldrb	r3, [r7, #14]
 8002a70:	2b40      	cmp	r3, #64	@ 0x40
 8002a72:	d10a      	bne.n	8002a8a <I2C_ITError+0x3a>
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	2b22      	cmp	r3, #34	@ 0x22
 8002a78:	d107      	bne.n	8002a8a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a88:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002a90:	2b28      	cmp	r3, #40	@ 0x28
 8002a92:	d107      	bne.n	8002aa4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2228      	movs	r2, #40	@ 0x28
 8002a9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002aa2:	e015      	b.n	8002ad0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002aae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ab2:	d00a      	beq.n	8002aca <I2C_ITError+0x7a>
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	2b60      	cmp	r3, #96	@ 0x60
 8002ab8:	d007      	beq.n	8002aca <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2220      	movs	r2, #32
 8002abe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ada:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ade:	d162      	bne.n	8002ba6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002aee:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002af4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d020      	beq.n	8002b40 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b02:	4a6a      	ldr	r2, [pc, #424]	@ (8002cac <I2C_ITError+0x25c>)
 8002b04:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe f94f 	bl	8000dae <HAL_DMA_Abort_IT>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 8089 	beq.w	8002c2a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0201 	bic.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	4798      	blx	r3
 8002b3e:	e074      	b.n	8002c2a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b44:	4a59      	ldr	r2, [pc, #356]	@ (8002cac <I2C_ITError+0x25c>)
 8002b46:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fe f92e 	bl	8000dae <HAL_DMA_Abort_IT>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d068      	beq.n	8002c2a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b62:	2b40      	cmp	r3, #64	@ 0x40
 8002b64:	d10b      	bne.n	8002b7e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	691a      	ldr	r2, [r3, #16]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0201 	bic.w	r2, r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	4798      	blx	r3
 8002ba4:	e041      	b.n	8002c2a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b60      	cmp	r3, #96	@ 0x60
 8002bb0:	d125      	bne.n	8002bfe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bca:	2b40      	cmp	r3, #64	@ 0x40
 8002bcc:	d10b      	bne.n	8002be6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0201 	bic.w	r2, r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7fe fece 	bl	8001998 <HAL_I2C_AbortCpltCallback>
 8002bfc:	e015      	b.n	8002c2a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c08:	2b40      	cmp	r3, #64	@ 0x40
 8002c0a:	d10b      	bne.n	8002c24 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7fd fd2b 	bl	8000680 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10e      	bne.n	8002c58 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d109      	bne.n	8002c58 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d104      	bne.n	8002c58 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d007      	beq.n	8002c68 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c66:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c6e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d113      	bne.n	8002ca4 <I2C_ITError+0x254>
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	2b28      	cmp	r3, #40	@ 0x28
 8002c80:	d110      	bne.n	8002ca4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb0 <I2C_ITError+0x260>)
 8002c86:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7fd fc10 	bl	80004c4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ca4:	bf00      	nop
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	08002cb5 	.word	0x08002cb5
 8002cb0:	ffff0000 	.word	0xffff0000

08002cb4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ccc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002cce:	4b4b      	ldr	r3, [pc, #300]	@ (8002dfc <I2C_DMAAbort+0x148>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	08db      	lsrs	r3, r3, #3
 8002cd4:	4a4a      	ldr	r2, [pc, #296]	@ (8002e00 <I2C_DMAAbort+0x14c>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	0a1a      	lsrs	r2, r3, #8
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	00da      	lsls	r2, r3, #3
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d106      	bne.n	8002cfc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf2:	f043 0220 	orr.w	r2, r3, #32
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8002cfa:	e00a      	b.n	8002d12 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d10:	d0ea      	beq.n	8002ce8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d1e:	2200      	movs	r2, #0
 8002d20:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d2e:	2200      	movs	r2, #0
 8002d30:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d40:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2200      	movs	r2, #0
 8002d46:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d54:	2200      	movs	r2, #0
 8002d56:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d64:	2200      	movs	r2, #0
 8002d66:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0201 	bic.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b60      	cmp	r3, #96	@ 0x60
 8002d82:	d10e      	bne.n	8002da2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	2200      	movs	r2, #0
 8002d98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002d9a:	6978      	ldr	r0, [r7, #20]
 8002d9c:	f7fe fdfc 	bl	8001998 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002da0:	e027      	b.n	8002df2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002da2:	7cfb      	ldrb	r3, [r7, #19]
 8002da4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002da8:	2b28      	cmp	r3, #40	@ 0x28
 8002daa:	d117      	bne.n	8002ddc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0201 	orr.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002dca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2228      	movs	r2, #40	@ 0x28
 8002dd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002dda:	e007      	b.n	8002dec <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002dec:	6978      	ldr	r0, [r7, #20]
 8002dee:	f7fd fc47 	bl	8000680 <HAL_I2C_ErrorCallback>
}
 8002df2:	bf00      	nop
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000000 	.word	0x20000000
 8002e00:	14f8b589 	.word	0x14f8b589

08002e04 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e10:	4b13      	ldr	r3, [pc, #76]	@ (8002e60 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	08db      	lsrs	r3, r3, #3
 8002e16:	4a13      	ldr	r2, [pc, #76]	@ (8002e64 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002e18:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1c:	0a1a      	lsrs	r2, r3, #8
 8002e1e:	4613      	mov	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d107      	bne.n	8002e42 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e36:	f043 0220 	orr.w	r2, r3, #32
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e008      	b.n	8002e54 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e50:	d0e9      	beq.n	8002e26 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	20000000 	.word	0x20000000
 8002e64:	14f8b589 	.word	0x14f8b589

08002e68 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e74:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002e78:	d103      	bne.n	8002e82 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002e80:	e007      	b.n	8002e92 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e86:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002e8a:	d102      	bne.n	8002e92 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2208      	movs	r2, #8
 8002e90:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
	...

08002ea0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e267      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d075      	beq.n	8002faa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ebe:	4b88      	ldr	r3, [pc, #544]	@ (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 030c 	and.w	r3, r3, #12
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d00c      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eca:	4b85      	ldr	r3, [pc, #532]	@ (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d112      	bne.n	8002efc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ed6:	4b82      	ldr	r3, [pc, #520]	@ (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ede:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ee2:	d10b      	bne.n	8002efc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee4:	4b7e      	ldr	r3, [pc, #504]	@ (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d05b      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x108>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d157      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e242      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f04:	d106      	bne.n	8002f14 <HAL_RCC_OscConfig+0x74>
 8002f06:	4b76      	ldr	r3, [pc, #472]	@ (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a75      	ldr	r2, [pc, #468]	@ (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	e01d      	b.n	8002f50 <HAL_RCC_OscConfig+0xb0>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f1c:	d10c      	bne.n	8002f38 <HAL_RCC_OscConfig+0x98>
 8002f1e:	4b70      	ldr	r3, [pc, #448]	@ (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a6f      	ldr	r2, [pc, #444]	@ (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002f24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	4b6d      	ldr	r3, [pc, #436]	@ (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a6c      	ldr	r2, [pc, #432]	@ (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	e00b      	b.n	8002f50 <HAL_RCC_OscConfig+0xb0>
 8002f38:	4b69      	ldr	r3, [pc, #420]	@ (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a68      	ldr	r2, [pc, #416]	@ (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002f3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	4b66      	ldr	r3, [pc, #408]	@ (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a65      	ldr	r2, [pc, #404]	@ (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002f4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d013      	beq.n	8002f80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f58:	f7fd fe0c 	bl	8000b74 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f60:	f7fd fe08 	bl	8000b74 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b64      	cmp	r3, #100	@ 0x64
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e207      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f72:	4b5b      	ldr	r3, [pc, #364]	@ (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCC_OscConfig+0xc0>
 8002f7e:	e014      	b.n	8002faa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f80:	f7fd fdf8 	bl	8000b74 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f88:	f7fd fdf4 	bl	8000b74 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b64      	cmp	r3, #100	@ 0x64
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e1f3      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f9a:	4b51      	ldr	r3, [pc, #324]	@ (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0xe8>
 8002fa6:	e000      	b.n	8002faa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d063      	beq.n	800307e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fb6:	4b4a      	ldr	r3, [pc, #296]	@ (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00b      	beq.n	8002fda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fc2:	4b47      	ldr	r3, [pc, #284]	@ (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d11c      	bne.n	8003008 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fce:	4b44      	ldr	r3, [pc, #272]	@ (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d116      	bne.n	8003008 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fda:	4b41      	ldr	r3, [pc, #260]	@ (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d005      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x152>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d001      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e1c7      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff2:	4b3b      	ldr	r3, [pc, #236]	@ (80030e0 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4937      	ldr	r1, [pc, #220]	@ (80030e0 <HAL_RCC_OscConfig+0x240>)
 8003002:	4313      	orrs	r3, r2
 8003004:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003006:	e03a      	b.n	800307e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d020      	beq.n	8003052 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003010:	4b34      	ldr	r3, [pc, #208]	@ (80030e4 <HAL_RCC_OscConfig+0x244>)
 8003012:	2201      	movs	r2, #1
 8003014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003016:	f7fd fdad 	bl	8000b74 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800301e:	f7fd fda9 	bl	8000b74 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e1a8      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003030:	4b2b      	ldr	r3, [pc, #172]	@ (80030e0 <HAL_RCC_OscConfig+0x240>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0f0      	beq.n	800301e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800303c:	4b28      	ldr	r3, [pc, #160]	@ (80030e0 <HAL_RCC_OscConfig+0x240>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	4925      	ldr	r1, [pc, #148]	@ (80030e0 <HAL_RCC_OscConfig+0x240>)
 800304c:	4313      	orrs	r3, r2
 800304e:	600b      	str	r3, [r1, #0]
 8003050:	e015      	b.n	800307e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003052:	4b24      	ldr	r3, [pc, #144]	@ (80030e4 <HAL_RCC_OscConfig+0x244>)
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003058:	f7fd fd8c 	bl	8000b74 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003060:	f7fd fd88 	bl	8000b74 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e187      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003072:	4b1b      	ldr	r3, [pc, #108]	@ (80030e0 <HAL_RCC_OscConfig+0x240>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d036      	beq.n	80030f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d016      	beq.n	80030c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003092:	4b15      	ldr	r3, [pc, #84]	@ (80030e8 <HAL_RCC_OscConfig+0x248>)
 8003094:	2201      	movs	r2, #1
 8003096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003098:	f7fd fd6c 	bl	8000b74 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030a0:	f7fd fd68 	bl	8000b74 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e167      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b2:	4b0b      	ldr	r3, [pc, #44]	@ (80030e0 <HAL_RCC_OscConfig+0x240>)
 80030b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCC_OscConfig+0x200>
 80030be:	e01b      	b.n	80030f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030c0:	4b09      	ldr	r3, [pc, #36]	@ (80030e8 <HAL_RCC_OscConfig+0x248>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c6:	f7fd fd55 	bl	8000b74 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030cc:	e00e      	b.n	80030ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ce:	f7fd fd51 	bl	8000b74 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d907      	bls.n	80030ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e150      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
 80030e0:	40023800 	.word	0x40023800
 80030e4:	42470000 	.word	0x42470000
 80030e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ec:	4b88      	ldr	r3, [pc, #544]	@ (8003310 <HAL_RCC_OscConfig+0x470>)
 80030ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1ea      	bne.n	80030ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 8097 	beq.w	8003234 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003106:	2300      	movs	r3, #0
 8003108:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800310a:	4b81      	ldr	r3, [pc, #516]	@ (8003310 <HAL_RCC_OscConfig+0x470>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10f      	bne.n	8003136 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003116:	2300      	movs	r3, #0
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	4b7d      	ldr	r3, [pc, #500]	@ (8003310 <HAL_RCC_OscConfig+0x470>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311e:	4a7c      	ldr	r2, [pc, #496]	@ (8003310 <HAL_RCC_OscConfig+0x470>)
 8003120:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003124:	6413      	str	r3, [r2, #64]	@ 0x40
 8003126:	4b7a      	ldr	r3, [pc, #488]	@ (8003310 <HAL_RCC_OscConfig+0x470>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800312e:	60bb      	str	r3, [r7, #8]
 8003130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003132:	2301      	movs	r3, #1
 8003134:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003136:	4b77      	ldr	r3, [pc, #476]	@ (8003314 <HAL_RCC_OscConfig+0x474>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800313e:	2b00      	cmp	r3, #0
 8003140:	d118      	bne.n	8003174 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003142:	4b74      	ldr	r3, [pc, #464]	@ (8003314 <HAL_RCC_OscConfig+0x474>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a73      	ldr	r2, [pc, #460]	@ (8003314 <HAL_RCC_OscConfig+0x474>)
 8003148:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800314c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800314e:	f7fd fd11 	bl	8000b74 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003156:	f7fd fd0d 	bl	8000b74 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e10c      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003168:	4b6a      	ldr	r3, [pc, #424]	@ (8003314 <HAL_RCC_OscConfig+0x474>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0f0      	beq.n	8003156 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d106      	bne.n	800318a <HAL_RCC_OscConfig+0x2ea>
 800317c:	4b64      	ldr	r3, [pc, #400]	@ (8003310 <HAL_RCC_OscConfig+0x470>)
 800317e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003180:	4a63      	ldr	r2, [pc, #396]	@ (8003310 <HAL_RCC_OscConfig+0x470>)
 8003182:	f043 0301 	orr.w	r3, r3, #1
 8003186:	6713      	str	r3, [r2, #112]	@ 0x70
 8003188:	e01c      	b.n	80031c4 <HAL_RCC_OscConfig+0x324>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b05      	cmp	r3, #5
 8003190:	d10c      	bne.n	80031ac <HAL_RCC_OscConfig+0x30c>
 8003192:	4b5f      	ldr	r3, [pc, #380]	@ (8003310 <HAL_RCC_OscConfig+0x470>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003196:	4a5e      	ldr	r2, [pc, #376]	@ (8003310 <HAL_RCC_OscConfig+0x470>)
 8003198:	f043 0304 	orr.w	r3, r3, #4
 800319c:	6713      	str	r3, [r2, #112]	@ 0x70
 800319e:	4b5c      	ldr	r3, [pc, #368]	@ (8003310 <HAL_RCC_OscConfig+0x470>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a2:	4a5b      	ldr	r2, [pc, #364]	@ (8003310 <HAL_RCC_OscConfig+0x470>)
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80031aa:	e00b      	b.n	80031c4 <HAL_RCC_OscConfig+0x324>
 80031ac:	4b58      	ldr	r3, [pc, #352]	@ (8003310 <HAL_RCC_OscConfig+0x470>)
 80031ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b0:	4a57      	ldr	r2, [pc, #348]	@ (8003310 <HAL_RCC_OscConfig+0x470>)
 80031b2:	f023 0301 	bic.w	r3, r3, #1
 80031b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80031b8:	4b55      	ldr	r3, [pc, #340]	@ (8003310 <HAL_RCC_OscConfig+0x470>)
 80031ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031bc:	4a54      	ldr	r2, [pc, #336]	@ (8003310 <HAL_RCC_OscConfig+0x470>)
 80031be:	f023 0304 	bic.w	r3, r3, #4
 80031c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d015      	beq.n	80031f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031cc:	f7fd fcd2 	bl	8000b74 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d2:	e00a      	b.n	80031ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031d4:	f7fd fcce 	bl	8000b74 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e0cb      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ea:	4b49      	ldr	r3, [pc, #292]	@ (8003310 <HAL_RCC_OscConfig+0x470>)
 80031ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0ee      	beq.n	80031d4 <HAL_RCC_OscConfig+0x334>
 80031f6:	e014      	b.n	8003222 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f8:	f7fd fcbc 	bl	8000b74 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031fe:	e00a      	b.n	8003216 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003200:	f7fd fcb8 	bl	8000b74 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800320e:	4293      	cmp	r3, r2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e0b5      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003216:	4b3e      	ldr	r3, [pc, #248]	@ (8003310 <HAL_RCC_OscConfig+0x470>)
 8003218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1ee      	bne.n	8003200 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003222:	7dfb      	ldrb	r3, [r7, #23]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d105      	bne.n	8003234 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003228:	4b39      	ldr	r3, [pc, #228]	@ (8003310 <HAL_RCC_OscConfig+0x470>)
 800322a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322c:	4a38      	ldr	r2, [pc, #224]	@ (8003310 <HAL_RCC_OscConfig+0x470>)
 800322e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003232:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 80a1 	beq.w	8003380 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800323e:	4b34      	ldr	r3, [pc, #208]	@ (8003310 <HAL_RCC_OscConfig+0x470>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 030c 	and.w	r3, r3, #12
 8003246:	2b08      	cmp	r3, #8
 8003248:	d05c      	beq.n	8003304 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d141      	bne.n	80032d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003252:	4b31      	ldr	r3, [pc, #196]	@ (8003318 <HAL_RCC_OscConfig+0x478>)
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003258:	f7fd fc8c 	bl	8000b74 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003260:	f7fd fc88 	bl	8000b74 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e087      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003272:	4b27      	ldr	r3, [pc, #156]	@ (8003310 <HAL_RCC_OscConfig+0x470>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69da      	ldr	r2, [r3, #28]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328c:	019b      	lsls	r3, r3, #6
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003294:	085b      	lsrs	r3, r3, #1
 8003296:	3b01      	subs	r3, #1
 8003298:	041b      	lsls	r3, r3, #16
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a0:	061b      	lsls	r3, r3, #24
 80032a2:	491b      	ldr	r1, [pc, #108]	@ (8003310 <HAL_RCC_OscConfig+0x470>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003318 <HAL_RCC_OscConfig+0x478>)
 80032aa:	2201      	movs	r2, #1
 80032ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ae:	f7fd fc61 	bl	8000b74 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b6:	f7fd fc5d 	bl	8000b74 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e05c      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c8:	4b11      	ldr	r3, [pc, #68]	@ (8003310 <HAL_RCC_OscConfig+0x470>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0f0      	beq.n	80032b6 <HAL_RCC_OscConfig+0x416>
 80032d4:	e054      	b.n	8003380 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d6:	4b10      	ldr	r3, [pc, #64]	@ (8003318 <HAL_RCC_OscConfig+0x478>)
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032dc:	f7fd fc4a 	bl	8000b74 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e4:	f7fd fc46 	bl	8000b74 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e045      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f6:	4b06      	ldr	r3, [pc, #24]	@ (8003310 <HAL_RCC_OscConfig+0x470>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f0      	bne.n	80032e4 <HAL_RCC_OscConfig+0x444>
 8003302:	e03d      	b.n	8003380 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d107      	bne.n	800331c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e038      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
 8003310:	40023800 	.word	0x40023800
 8003314:	40007000 	.word	0x40007000
 8003318:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800331c:	4b1b      	ldr	r3, [pc, #108]	@ (800338c <HAL_RCC_OscConfig+0x4ec>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d028      	beq.n	800337c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003334:	429a      	cmp	r2, r3
 8003336:	d121      	bne.n	800337c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003342:	429a      	cmp	r2, r3
 8003344:	d11a      	bne.n	800337c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800334c:	4013      	ands	r3, r2
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003352:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003354:	4293      	cmp	r3, r2
 8003356:	d111      	bne.n	800337c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003362:	085b      	lsrs	r3, r3, #1
 8003364:	3b01      	subs	r3, #1
 8003366:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003368:	429a      	cmp	r2, r3
 800336a:	d107      	bne.n	800337c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003376:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003378:	429a      	cmp	r2, r3
 800337a:	d001      	beq.n	8003380 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40023800 	.word	0x40023800

08003390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0cc      	b.n	800353e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033a4:	4b68      	ldr	r3, [pc, #416]	@ (8003548 <HAL_RCC_ClockConfig+0x1b8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d90c      	bls.n	80033cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b2:	4b65      	ldr	r3, [pc, #404]	@ (8003548 <HAL_RCC_ClockConfig+0x1b8>)
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ba:	4b63      	ldr	r3, [pc, #396]	@ (8003548 <HAL_RCC_ClockConfig+0x1b8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d001      	beq.n	80033cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e0b8      	b.n	800353e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d020      	beq.n	800341a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033e4:	4b59      	ldr	r3, [pc, #356]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	4a58      	ldr	r2, [pc, #352]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0308 	and.w	r3, r3, #8
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033fc:	4b53      	ldr	r3, [pc, #332]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	4a52      	ldr	r2, [pc, #328]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003406:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003408:	4b50      	ldr	r3, [pc, #320]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	494d      	ldr	r1, [pc, #308]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	4313      	orrs	r3, r2
 8003418:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d044      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d107      	bne.n	800343e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342e:	4b47      	ldr	r3, [pc, #284]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d119      	bne.n	800346e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e07f      	b.n	800353e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d003      	beq.n	800344e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800344a:	2b03      	cmp	r3, #3
 800344c:	d107      	bne.n	800345e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800344e:	4b3f      	ldr	r3, [pc, #252]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d109      	bne.n	800346e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e06f      	b.n	800353e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800345e:	4b3b      	ldr	r3, [pc, #236]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e067      	b.n	800353e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800346e:	4b37      	ldr	r3, [pc, #220]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f023 0203 	bic.w	r2, r3, #3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	4934      	ldr	r1, [pc, #208]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 800347c:	4313      	orrs	r3, r2
 800347e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003480:	f7fd fb78 	bl	8000b74 <HAL_GetTick>
 8003484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003486:	e00a      	b.n	800349e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003488:	f7fd fb74 	bl	8000b74 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003496:	4293      	cmp	r3, r2
 8003498:	d901      	bls.n	800349e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e04f      	b.n	800353e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349e:	4b2b      	ldr	r3, [pc, #172]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 020c 	and.w	r2, r3, #12
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d1eb      	bne.n	8003488 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034b0:	4b25      	ldr	r3, [pc, #148]	@ (8003548 <HAL_RCC_ClockConfig+0x1b8>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d20c      	bcs.n	80034d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034be:	4b22      	ldr	r3, [pc, #136]	@ (8003548 <HAL_RCC_ClockConfig+0x1b8>)
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c6:	4b20      	ldr	r3, [pc, #128]	@ (8003548 <HAL_RCC_ClockConfig+0x1b8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d001      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e032      	b.n	800353e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034e4:	4b19      	ldr	r3, [pc, #100]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	4916      	ldr	r1, [pc, #88]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d009      	beq.n	8003516 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003502:	4b12      	ldr	r3, [pc, #72]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	490e      	ldr	r1, [pc, #56]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	4313      	orrs	r3, r2
 8003514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003516:	f000 f821 	bl	800355c <HAL_RCC_GetSysClockFreq>
 800351a:	4602      	mov	r2, r0
 800351c:	4b0b      	ldr	r3, [pc, #44]	@ (800354c <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	091b      	lsrs	r3, r3, #4
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	490a      	ldr	r1, [pc, #40]	@ (8003550 <HAL_RCC_ClockConfig+0x1c0>)
 8003528:	5ccb      	ldrb	r3, [r1, r3]
 800352a:	fa22 f303 	lsr.w	r3, r2, r3
 800352e:	4a09      	ldr	r2, [pc, #36]	@ (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 8003530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003532:	4b09      	ldr	r3, [pc, #36]	@ (8003558 <HAL_RCC_ClockConfig+0x1c8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f7fd fad8 	bl	8000aec <HAL_InitTick>

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40023c00 	.word	0x40023c00
 800354c:	40023800 	.word	0x40023800
 8003550:	08003798 	.word	0x08003798
 8003554:	20000000 	.word	0x20000000
 8003558:	20000004 	.word	0x20000004

0800355c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800355c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003560:	b090      	sub	sp, #64	@ 0x40
 8003562:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	637b      	str	r3, [r7, #52]	@ 0x34
 8003568:	2300      	movs	r3, #0
 800356a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800356c:	2300      	movs	r3, #0
 800356e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003574:	4b59      	ldr	r3, [pc, #356]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x180>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 030c 	and.w	r3, r3, #12
 800357c:	2b08      	cmp	r3, #8
 800357e:	d00d      	beq.n	800359c <HAL_RCC_GetSysClockFreq+0x40>
 8003580:	2b08      	cmp	r3, #8
 8003582:	f200 80a1 	bhi.w	80036c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003586:	2b00      	cmp	r3, #0
 8003588:	d002      	beq.n	8003590 <HAL_RCC_GetSysClockFreq+0x34>
 800358a:	2b04      	cmp	r3, #4
 800358c:	d003      	beq.n	8003596 <HAL_RCC_GetSysClockFreq+0x3a>
 800358e:	e09b      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003590:	4b53      	ldr	r3, [pc, #332]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003592:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003594:	e09b      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003596:	4b53      	ldr	r3, [pc, #332]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003598:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800359a:	e098      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800359c:	4b4f      	ldr	r3, [pc, #316]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x180>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035a6:	4b4d      	ldr	r3, [pc, #308]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x180>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d028      	beq.n	8003604 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035b2:	4b4a      	ldr	r3, [pc, #296]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x180>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	099b      	lsrs	r3, r3, #6
 80035b8:	2200      	movs	r2, #0
 80035ba:	623b      	str	r3, [r7, #32]
 80035bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80035c4:	2100      	movs	r1, #0
 80035c6:	4b47      	ldr	r3, [pc, #284]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80035c8:	fb03 f201 	mul.w	r2, r3, r1
 80035cc:	2300      	movs	r3, #0
 80035ce:	fb00 f303 	mul.w	r3, r0, r3
 80035d2:	4413      	add	r3, r2
 80035d4:	4a43      	ldr	r2, [pc, #268]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80035d6:	fba0 1202 	umull	r1, r2, r0, r2
 80035da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035dc:	460a      	mov	r2, r1
 80035de:	62ba      	str	r2, [r7, #40]	@ 0x28
 80035e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035e2:	4413      	add	r3, r2
 80035e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e8:	2200      	movs	r2, #0
 80035ea:	61bb      	str	r3, [r7, #24]
 80035ec:	61fa      	str	r2, [r7, #28]
 80035ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80035f6:	f7fc fded 	bl	80001d4 <__aeabi_uldivmod>
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	4613      	mov	r3, r2
 8003600:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003602:	e053      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003604:	4b35      	ldr	r3, [pc, #212]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x180>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	099b      	lsrs	r3, r3, #6
 800360a:	2200      	movs	r2, #0
 800360c:	613b      	str	r3, [r7, #16]
 800360e:	617a      	str	r2, [r7, #20]
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003616:	f04f 0b00 	mov.w	fp, #0
 800361a:	4652      	mov	r2, sl
 800361c:	465b      	mov	r3, fp
 800361e:	f04f 0000 	mov.w	r0, #0
 8003622:	f04f 0100 	mov.w	r1, #0
 8003626:	0159      	lsls	r1, r3, #5
 8003628:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800362c:	0150      	lsls	r0, r2, #5
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	ebb2 080a 	subs.w	r8, r2, sl
 8003636:	eb63 090b 	sbc.w	r9, r3, fp
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003646:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800364a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800364e:	ebb2 0408 	subs.w	r4, r2, r8
 8003652:	eb63 0509 	sbc.w	r5, r3, r9
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	00eb      	lsls	r3, r5, #3
 8003660:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003664:	00e2      	lsls	r2, r4, #3
 8003666:	4614      	mov	r4, r2
 8003668:	461d      	mov	r5, r3
 800366a:	eb14 030a 	adds.w	r3, r4, sl
 800366e:	603b      	str	r3, [r7, #0]
 8003670:	eb45 030b 	adc.w	r3, r5, fp
 8003674:	607b      	str	r3, [r7, #4]
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003682:	4629      	mov	r1, r5
 8003684:	028b      	lsls	r3, r1, #10
 8003686:	4621      	mov	r1, r4
 8003688:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800368c:	4621      	mov	r1, r4
 800368e:	028a      	lsls	r2, r1, #10
 8003690:	4610      	mov	r0, r2
 8003692:	4619      	mov	r1, r3
 8003694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003696:	2200      	movs	r2, #0
 8003698:	60bb      	str	r3, [r7, #8]
 800369a:	60fa      	str	r2, [r7, #12]
 800369c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036a0:	f7fc fd98 	bl	80001d4 <__aeabi_uldivmod>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4613      	mov	r3, r2
 80036aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036ac:	4b0b      	ldr	r3, [pc, #44]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x180>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	0c1b      	lsrs	r3, r3, #16
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	3301      	adds	r3, #1
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80036bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80036be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036c6:	e002      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036c8:	4b05      	ldr	r3, [pc, #20]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80036ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3740      	adds	r7, #64	@ 0x40
 80036d4:	46bd      	mov	sp, r7
 80036d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036da:	bf00      	nop
 80036dc:	40023800 	.word	0x40023800
 80036e0:	00f42400 	.word	0x00f42400
 80036e4:	017d7840 	.word	0x017d7840

080036e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036ec:	4b03      	ldr	r3, [pc, #12]	@ (80036fc <HAL_RCC_GetHCLKFreq+0x14>)
 80036ee:	681b      	ldr	r3, [r3, #0]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	20000000 	.word	0x20000000

08003700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003704:	f7ff fff0 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 8003708:	4602      	mov	r2, r0
 800370a:	4b05      	ldr	r3, [pc, #20]	@ (8003720 <HAL_RCC_GetPCLK1Freq+0x20>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	0a9b      	lsrs	r3, r3, #10
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	4903      	ldr	r1, [pc, #12]	@ (8003724 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003716:	5ccb      	ldrb	r3, [r1, r3]
 8003718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800371c:	4618      	mov	r0, r3
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40023800 	.word	0x40023800
 8003724:	080037a8 	.word	0x080037a8

08003728 <memset>:
 8003728:	4402      	add	r2, r0
 800372a:	4603      	mov	r3, r0
 800372c:	4293      	cmp	r3, r2
 800372e:	d100      	bne.n	8003732 <memset+0xa>
 8003730:	4770      	bx	lr
 8003732:	f803 1b01 	strb.w	r1, [r3], #1
 8003736:	e7f9      	b.n	800372c <memset+0x4>

08003738 <__libc_init_array>:
 8003738:	b570      	push	{r4, r5, r6, lr}
 800373a:	4d0d      	ldr	r5, [pc, #52]	@ (8003770 <__libc_init_array+0x38>)
 800373c:	4c0d      	ldr	r4, [pc, #52]	@ (8003774 <__libc_init_array+0x3c>)
 800373e:	1b64      	subs	r4, r4, r5
 8003740:	10a4      	asrs	r4, r4, #2
 8003742:	2600      	movs	r6, #0
 8003744:	42a6      	cmp	r6, r4
 8003746:	d109      	bne.n	800375c <__libc_init_array+0x24>
 8003748:	4d0b      	ldr	r5, [pc, #44]	@ (8003778 <__libc_init_array+0x40>)
 800374a:	4c0c      	ldr	r4, [pc, #48]	@ (800377c <__libc_init_array+0x44>)
 800374c:	f000 f818 	bl	8003780 <_init>
 8003750:	1b64      	subs	r4, r4, r5
 8003752:	10a4      	asrs	r4, r4, #2
 8003754:	2600      	movs	r6, #0
 8003756:	42a6      	cmp	r6, r4
 8003758:	d105      	bne.n	8003766 <__libc_init_array+0x2e>
 800375a:	bd70      	pop	{r4, r5, r6, pc}
 800375c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003760:	4798      	blx	r3
 8003762:	3601      	adds	r6, #1
 8003764:	e7ee      	b.n	8003744 <__libc_init_array+0xc>
 8003766:	f855 3b04 	ldr.w	r3, [r5], #4
 800376a:	4798      	blx	r3
 800376c:	3601      	adds	r6, #1
 800376e:	e7f2      	b.n	8003756 <__libc_init_array+0x1e>
 8003770:	080037b8 	.word	0x080037b8
 8003774:	080037b8 	.word	0x080037b8
 8003778:	080037b8 	.word	0x080037b8
 800377c:	080037bc 	.word	0x080037bc

08003780 <_init>:
 8003780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003782:	bf00      	nop
 8003784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003786:	bc08      	pop	{r3}
 8003788:	469e      	mov	lr, r3
 800378a:	4770      	bx	lr

0800378c <_fini>:
 800378c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800378e:	bf00      	nop
 8003790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003792:	bc08      	pop	{r3}
 8003794:	469e      	mov	lr, r3
 8003796:	4770      	bx	lr
