
Blinkusingarray.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003550  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080036e4  080036e4  000046e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036fc  080036fc  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080036fc  080036fc  000046fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003704  08003704  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003704  08003704  00004704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003708  08003708  00004708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800370c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  08003718  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08003718  00005088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007735  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015d8  00000000  00000000  0000c771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000778  00000000  00000000  0000dd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005bc  00000000  00000000  0000e4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001497d  00000000  00000000  0000ea84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ae5  00000000  00000000  00023401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081513  00000000  00000000  0002cee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ae3f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e40  00000000  00000000  000ae43c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000b027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080036cc 	.word	0x080036cc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080036cc 	.word	0x080036cc

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_I2C_ListenCpltCallback>:


uint8_t count = 0;

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 80004cc:	6878      	ldr	r0, [r7, #4]
 80004ce:	f000 ffaf 	bl	8001430 <HAL_I2C_EnableListen_IT>
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
	...

080004dc <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	460b      	mov	r3, r1
 80004e6:	70fb      	strb	r3, [r7, #3]
 80004e8:	4613      	mov	r3, r2
 80004ea:	803b      	strh	r3, [r7, #0]
	if (TransferDirection == I2C_DIRECTION_TRANSMIT)
 80004ec:	78fb      	ldrb	r3, [r7, #3]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d106      	bne.n	8000500 <HAL_I2C_AddrCallback+0x24>
	{
		HAL_I2C_Slave_Sequential_Receive_IT(hi2c, RxData, RxSIZE, I2C_FIRST_AND_LAST_FRAME);
 80004f2:	2308      	movs	r3, #8
 80004f4:	2204      	movs	r2, #4
 80004f6:	4905      	ldr	r1, [pc, #20]	@ (800050c <HAL_I2C_AddrCallback+0x30>)
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f000 ff26 	bl	800134a <HAL_I2C_Slave_Seq_Receive_IT>
	}
	else
	{
		Error_Handler();
	}
}
 80004fe:	e001      	b.n	8000504 <HAL_I2C_AddrCallback+0x28>
		Error_Handler();
 8000500:	f000 f94e 	bl	80007a0 <Error_Handler>
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	2000007c 	.word	0x2000007c

08000510 <HAL_I2C_SlaveRxCpltCallback>:



void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	count++;
 8000518:	4b05      	ldr	r3, [pc, #20]	@ (8000530 <HAL_I2C_SlaveRxCpltCallback+0x20>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	3301      	adds	r3, #1
 800051e:	b2da      	uxtb	r2, r3
 8000520:	4b03      	ldr	r3, [pc, #12]	@ (8000530 <HAL_I2C_SlaveRxCpltCallback+0x20>)
 8000522:	701a      	strb	r2, [r3, #0]


}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	20000080 	.word	0x20000080

08000534 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f000 ff77 	bl	8001430 <HAL_I2C_EnableListen_IT>
}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
	...

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000552:	f000 fa2b 	bl	80009ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000556:	f000 f839 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055a:	f000 f8cf 	bl	80006fc <MX_GPIO_Init>
  MX_I2C1_Init();
 800055e:	f000 f89f 	bl	80006a0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_I2C_EnableListen_IT(&hi2c1)!= HAL_OK)
 8000562:	4817      	ldr	r0, [pc, #92]	@ (80005c0 <main+0x74>)
 8000564:	f000 ff64 	bl	8001430 <HAL_I2C_EnableListen_IT>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <main+0x26>
    {
  	  Error_Handler();
 800056e:	f000 f917 	bl	80007a0 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  uint8_t ct=RxData[2];
 8000572:	4b14      	ldr	r3, [pc, #80]	@ (80005c4 <main+0x78>)
 8000574:	789b      	ldrb	r3, [r3, #2]
 8000576:	70fb      	strb	r3, [r7, #3]
	  for (int i = 0; i < ct; i++) {
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	e016      	b.n	80005ac <main+0x60>
	  	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800057e:	2201      	movs	r2, #1
 8000580:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000584:	4810      	ldr	r0, [pc, #64]	@ (80005c8 <main+0x7c>)
 8000586:	f000 fd6d 	bl	8001064 <HAL_GPIO_WritePin>
	  	    HAL_Delay(500);
 800058a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800058e:	f000 fa7f 	bl	8000a90 <HAL_Delay>
	  	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000598:	480b      	ldr	r0, [pc, #44]	@ (80005c8 <main+0x7c>)
 800059a:	f000 fd63 	bl	8001064 <HAL_GPIO_WritePin>
	  	    HAL_Delay(500);
 800059e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005a2:	f000 fa75 	bl	8000a90 <HAL_Delay>
	  for (int i = 0; i < ct; i++) {
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	3301      	adds	r3, #1
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	78fb      	ldrb	r3, [r7, #3]
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	dbe4      	blt.n	800057e <main+0x32>
	  	  }
	  HAL_Delay(3000);
 80005b4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80005b8:	f000 fa6a 	bl	8000a90 <HAL_Delay>
  {
 80005bc:	e7d9      	b.n	8000572 <main+0x26>
 80005be:	bf00      	nop
 80005c0:	20000028 	.word	0x20000028
 80005c4:	2000007c 	.word	0x2000007c
 80005c8:	40020800 	.word	0x40020800

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	@ 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	@ 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f003 f84a 	bl	8003674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b28      	ldr	r3, [pc, #160]	@ (8000698 <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f8:	4a27      	ldr	r2, [pc, #156]	@ (8000698 <SystemClock_Config+0xcc>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000600:	4b25      	ldr	r3, [pc, #148]	@ (8000698 <SystemClock_Config+0xcc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b22      	ldr	r3, [pc, #136]	@ (800069c <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000618:	4a20      	ldr	r2, [pc, #128]	@ (800069c <SystemClock_Config+0xd0>)
 800061a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b1e      	ldr	r3, [pc, #120]	@ (800069c <SystemClock_Config+0xd0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800062c:	2301      	movs	r3, #1
 800062e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000630:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000634:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000636:	2302      	movs	r3, #2
 8000638:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800063e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000640:	2319      	movs	r3, #25
 8000642:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000644:	23a8      	movs	r3, #168	@ 0xa8
 8000646:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800064c:	2304      	movs	r3, #4
 800064e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0320 	add.w	r3, r7, #32
 8000654:	4618      	mov	r0, r3
 8000656:	f002 fbc9 	bl	8002dec <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000660:	f000 f89e 	bl	80007a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	2302      	movs	r3, #2
 800066a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000670:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000674:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	2102      	movs	r1, #2
 8000680:	4618      	mov	r0, r3
 8000682:	f002 fe2b 	bl	80032dc <HAL_RCC_ClockConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800068c:	f000 f888 	bl	80007a0 <Error_Handler>
  }
}
 8000690:	bf00      	nop
 8000692:	3750      	adds	r7, #80	@ 0x50
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a4:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006a6:	4a13      	ldr	r2, [pc, #76]	@ (80006f4 <MX_I2C1_Init+0x54>)
 80006a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006aa:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006ac:	4a12      	ldr	r2, [pc, #72]	@ (80006f8 <MX_I2C1_Init+0x58>)
 80006ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 36;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006b8:	2224      	movs	r2, #36	@ 0x24
 80006ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ca:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d0:	4b07      	ldr	r3, [pc, #28]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d6:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006dc:	4804      	ldr	r0, [pc, #16]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006de:	f000 fcdb 	bl	8001098 <HAL_I2C_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006e8:	f000 f85a 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000028 	.word	0x20000028
 80006f4:	40005400 	.word	0x40005400
 80006f8:	000186a0 	.word	0x000186a0

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	4b20      	ldr	r3, [pc, #128]	@ (8000798 <MX_GPIO_Init+0x9c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a1f      	ldr	r2, [pc, #124]	@ (8000798 <MX_GPIO_Init+0x9c>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
 8000722:	4b1d      	ldr	r3, [pc, #116]	@ (8000798 <MX_GPIO_Init+0x9c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b19      	ldr	r3, [pc, #100]	@ (8000798 <MX_GPIO_Init+0x9c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a18      	ldr	r2, [pc, #96]	@ (8000798 <MX_GPIO_Init+0x9c>)
 8000738:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b16      	ldr	r3, [pc, #88]	@ (8000798 <MX_GPIO_Init+0x9c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_GPIO_Init+0x9c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a11      	ldr	r2, [pc, #68]	@ (8000798 <MX_GPIO_Init+0x9c>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_GPIO_Init+0x9c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800076c:	480b      	ldr	r0, [pc, #44]	@ (800079c <MX_GPIO_Init+0xa0>)
 800076e:	f000 fc79 	bl	8001064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000772:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000776:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	4619      	mov	r1, r3
 800078a:	4804      	ldr	r0, [pc, #16]	@ (800079c <MX_GPIO_Init+0xa0>)
 800078c:	f000 fae6 	bl	8000d5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000790:	bf00      	nop
 8000792:	3720      	adds	r7, #32
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40020800 	.word	0x40020800

080007a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a4:	b672      	cpsid	i
}
 80007a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <Error_Handler+0x8>

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b10      	ldr	r3, [pc, #64]	@ (80007f8 <HAL_MspInit+0x4c>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ba:	4a0f      	ldr	r2, [pc, #60]	@ (80007f8 <HAL_MspInit+0x4c>)
 80007bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80007c2:	4b0d      	ldr	r3, [pc, #52]	@ (80007f8 <HAL_MspInit+0x4c>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <HAL_MspInit+0x4c>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d6:	4a08      	ldr	r2, [pc, #32]	@ (80007f8 <HAL_MspInit+0x4c>)
 80007d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80007de:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <HAL_MspInit+0x4c>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800

080007fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	@ 0x28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a21      	ldr	r2, [pc, #132]	@ (80008a0 <HAL_I2C_MspInit+0xa4>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d13b      	bne.n	8000896 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	4b20      	ldr	r3, [pc, #128]	@ (80008a4 <HAL_I2C_MspInit+0xa8>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a1f      	ldr	r2, [pc, #124]	@ (80008a4 <HAL_I2C_MspInit+0xa8>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b1d      	ldr	r3, [pc, #116]	@ (80008a4 <HAL_I2C_MspInit+0xa8>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800083a:	23c0      	movs	r3, #192	@ 0xc0
 800083c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800083e:	2312      	movs	r3, #18
 8000840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000846:	2303      	movs	r3, #3
 8000848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800084a:	2304      	movs	r3, #4
 800084c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4814      	ldr	r0, [pc, #80]	@ (80008a8 <HAL_I2C_MspInit+0xac>)
 8000856:	f000 fa81 	bl	8000d5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <HAL_I2C_MspInit+0xa8>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000862:	4a10      	ldr	r2, [pc, #64]	@ (80008a4 <HAL_I2C_MspInit+0xa8>)
 8000864:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000868:	6413      	str	r3, [r2, #64]	@ 0x40
 800086a:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <HAL_I2C_MspInit+0xa8>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	201f      	movs	r0, #31
 800087c:	f000 fa07 	bl	8000c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000880:	201f      	movs	r0, #31
 8000882:	f000 fa20 	bl	8000cc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	2020      	movs	r0, #32
 800088c:	f000 f9ff 	bl	8000c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000890:	2020      	movs	r0, #32
 8000892:	f000 fa18 	bl	8000cc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000896:	bf00      	nop
 8000898:	3728      	adds	r7, #40	@ 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40005400 	.word	0x40005400
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020400 	.word	0x40020400

080008ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <NMI_Handler+0x4>

080008b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <HardFault_Handler+0x4>

080008bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <MemManage_Handler+0x4>

080008c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <BusFault_Handler+0x4>

080008cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <UsageFault_Handler+0x4>

080008d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000902:	f000 f8a5 	bl	8000a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000910:	4802      	ldr	r0, [pc, #8]	@ (800091c <I2C1_EV_IRQHandler+0x10>)
 8000912:	f000 fdc3 	bl	800149c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000028 	.word	0x20000028

08000920 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000924:	4802      	ldr	r0, [pc, #8]	@ (8000930 <I2C1_ER_IRQHandler+0x10>)
 8000926:	f000 ff0c 	bl	8001742 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000028 	.word	0x20000028

08000934 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000938:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <SystemInit+0x20>)
 800093a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800093e:	4a05      	ldr	r2, [pc, #20]	@ (8000954 <SystemInit+0x20>)
 8000940:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000944:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000958:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000990 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800095c:	f7ff ffea 	bl	8000934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000960:	480c      	ldr	r0, [pc, #48]	@ (8000994 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000962:	490d      	ldr	r1, [pc, #52]	@ (8000998 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000964:	4a0d      	ldr	r2, [pc, #52]	@ (800099c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000968:	e002      	b.n	8000970 <LoopCopyDataInit>

0800096a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800096c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096e:	3304      	adds	r3, #4

08000970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000974:	d3f9      	bcc.n	800096a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000976:	4a0a      	ldr	r2, [pc, #40]	@ (80009a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000978:	4c0a      	ldr	r4, [pc, #40]	@ (80009a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800097c:	e001      	b.n	8000982 <LoopFillZerobss>

0800097e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000980:	3204      	adds	r2, #4

08000982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000984:	d3fb      	bcc.n	800097e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000986:	f002 fe7d 	bl	8003684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800098a:	f7ff fddf 	bl	800054c <main>
  bx  lr    
 800098e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000990:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000998:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800099c:	0800370c 	.word	0x0800370c
  ldr r2, =_sbss
 80009a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009a4:	20000088 	.word	0x20000088

080009a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC_IRQHandler>
	...

080009ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009b0:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <HAL_Init+0x40>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0d      	ldr	r2, [pc, #52]	@ (80009ec <HAL_Init+0x40>)
 80009b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009bc:	4b0b      	ldr	r3, [pc, #44]	@ (80009ec <HAL_Init+0x40>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a0a      	ldr	r2, [pc, #40]	@ (80009ec <HAL_Init+0x40>)
 80009c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c8:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <HAL_Init+0x40>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a07      	ldr	r2, [pc, #28]	@ (80009ec <HAL_Init+0x40>)
 80009ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d4:	2003      	movs	r0, #3
 80009d6:	f000 f94f 	bl	8000c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009da:	200f      	movs	r0, #15
 80009dc:	f000 f808 	bl	80009f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e0:	f7ff fee4 	bl	80007ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023c00 	.word	0x40023c00

080009f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f8:	4b12      	ldr	r3, [pc, #72]	@ (8000a44 <HAL_InitTick+0x54>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <HAL_InitTick+0x58>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	4619      	mov	r1, r3
 8000a02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 f967 	bl	8000ce2 <HAL_SYSTICK_Config>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e00e      	b.n	8000a3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b0f      	cmp	r3, #15
 8000a22:	d80a      	bhi.n	8000a3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a24:	2200      	movs	r2, #0
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2c:	f000 f92f 	bl	8000c8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a30:	4a06      	ldr	r2, [pc, #24]	@ (8000a4c <HAL_InitTick+0x5c>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a36:	2300      	movs	r3, #0
 8000a38:	e000      	b.n	8000a3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000000 	.word	0x20000000
 8000a48:	20000008 	.word	0x20000008
 8000a4c:	20000004 	.word	0x20000004

08000a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a54:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <HAL_IncTick+0x20>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <HAL_IncTick+0x24>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4413      	add	r3, r2
 8000a60:	4a04      	ldr	r2, [pc, #16]	@ (8000a74 <HAL_IncTick+0x24>)
 8000a62:	6013      	str	r3, [r2, #0]
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000008 	.word	0x20000008
 8000a74:	20000084 	.word	0x20000084

08000a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a7c:	4b03      	ldr	r3, [pc, #12]	@ (8000a8c <HAL_GetTick+0x14>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000084 	.word	0x20000084

08000a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a98:	f7ff ffee 	bl	8000a78 <HAL_GetTick>
 8000a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa8:	d005      	beq.n	8000ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad4 <HAL_Delay+0x44>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ab6:	bf00      	nop
 8000ab8:	f7ff ffde 	bl	8000a78 <HAL_GetTick>
 8000abc:	4602      	mov	r2, r0
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	68fa      	ldr	r2, [r7, #12]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d8f7      	bhi.n	8000ab8 <HAL_Delay+0x28>
  {
  }
}
 8000ac8:	bf00      	nop
 8000aca:	bf00      	nop
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000008 	.word	0x20000008

08000ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <__NVIC_SetPriorityGrouping+0x44>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000af4:	4013      	ands	r3, r2
 8000af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b0a:	4a04      	ldr	r2, [pc, #16]	@ (8000b1c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	60d3      	str	r3, [r2, #12]
}
 8000b10:	bf00      	nop
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b24:	4b04      	ldr	r3, [pc, #16]	@ (8000b38 <__NVIC_GetPriorityGrouping+0x18>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	0a1b      	lsrs	r3, r3, #8
 8000b2a:	f003 0307 	and.w	r3, r3, #7
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	db0b      	blt.n	8000b66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	f003 021f 	and.w	r2, r3, #31
 8000b54:	4907      	ldr	r1, [pc, #28]	@ (8000b74 <__NVIC_EnableIRQ+0x38>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	095b      	lsrs	r3, r3, #5
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000e100 	.word	0xe000e100

08000b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	db0a      	blt.n	8000ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	490c      	ldr	r1, [pc, #48]	@ (8000bc4 <__NVIC_SetPriority+0x4c>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	0112      	lsls	r2, r2, #4
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba0:	e00a      	b.n	8000bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4908      	ldr	r1, [pc, #32]	@ (8000bc8 <__NVIC_SetPriority+0x50>)
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	f003 030f 	and.w	r3, r3, #15
 8000bae:	3b04      	subs	r3, #4
 8000bb0:	0112      	lsls	r2, r2, #4
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	440b      	add	r3, r1
 8000bb6:	761a      	strb	r2, [r3, #24]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000e100 	.word	0xe000e100
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b089      	sub	sp, #36	@ 0x24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	f1c3 0307 	rsb	r3, r3, #7
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	bf28      	it	cs
 8000bea:	2304      	movcs	r3, #4
 8000bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	2b06      	cmp	r3, #6
 8000bf4:	d902      	bls.n	8000bfc <NVIC_EncodePriority+0x30>
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3b03      	subs	r3, #3
 8000bfa:	e000      	b.n	8000bfe <NVIC_EncodePriority+0x32>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	f04f 32ff 	mov.w	r2, #4294967295
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43da      	mvns	r2, r3
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	401a      	ands	r2, r3
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c14:	f04f 31ff 	mov.w	r1, #4294967295
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	43d9      	mvns	r1, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	4313      	orrs	r3, r2
         );
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3724      	adds	r7, #36	@ 0x24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
	...

08000c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c44:	d301      	bcc.n	8000c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c46:	2301      	movs	r3, #1
 8000c48:	e00f      	b.n	8000c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c74 <SysTick_Config+0x40>)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c52:	210f      	movs	r1, #15
 8000c54:	f04f 30ff 	mov.w	r0, #4294967295
 8000c58:	f7ff ff8e 	bl	8000b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c5c:	4b05      	ldr	r3, [pc, #20]	@ (8000c74 <SysTick_Config+0x40>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c62:	4b04      	ldr	r3, [pc, #16]	@ (8000c74 <SysTick_Config+0x40>)
 8000c64:	2207      	movs	r2, #7
 8000c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	e000e010 	.word	0xe000e010

08000c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff ff29 	bl	8000ad8 <__NVIC_SetPriorityGrouping>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b086      	sub	sp, #24
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	4603      	mov	r3, r0
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
 8000c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca0:	f7ff ff3e 	bl	8000b20 <__NVIC_GetPriorityGrouping>
 8000ca4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	68b9      	ldr	r1, [r7, #8]
 8000caa:	6978      	ldr	r0, [r7, #20]
 8000cac:	f7ff ff8e 	bl	8000bcc <NVIC_EncodePriority>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff5d 	bl	8000b78 <__NVIC_SetPriority>
}
 8000cbe:	bf00      	nop
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4603      	mov	r3, r0
 8000cce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff31 	bl	8000b3c <__NVIC_EnableIRQ>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff ffa2 	bl	8000c34 <SysTick_Config>
 8000cf0:	4603      	mov	r3, r0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d004      	beq.n	8000d18 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2280      	movs	r2, #128	@ 0x80
 8000d12:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	e00c      	b.n	8000d32 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2205      	movs	r2, #5
 8000d1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f022 0201 	bic.w	r2, r2, #1
 8000d2e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000d4c:	b2db      	uxtb	r3, r3
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	@ 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
 8000d76:	e159      	b.n	800102c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d78:	2201      	movs	r2, #1
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	f040 8148 	bne.w	8001026 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 0303 	and.w	r3, r3, #3
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d005      	beq.n	8000dae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d130      	bne.n	8000e10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	2203      	movs	r2, #3
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	68da      	ldr	r2, [r3, #12]
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000de4:	2201      	movs	r2, #1
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	091b      	lsrs	r3, r3, #4
 8000dfa:	f003 0201 	and.w	r2, r3, #1
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 0303 	and.w	r3, r3, #3
 8000e18:	2b03      	cmp	r3, #3
 8000e1a:	d017      	beq.n	8000e4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	2203      	movs	r2, #3
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4013      	ands	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	689a      	ldr	r2, [r3, #8]
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0303 	and.w	r3, r3, #3
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d123      	bne.n	8000ea0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	08da      	lsrs	r2, r3, #3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3208      	adds	r2, #8
 8000e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	f003 0307 	and.w	r3, r3, #7
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	220f      	movs	r2, #15
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	691a      	ldr	r2, [r3, #16]
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	08da      	lsrs	r2, r3, #3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3208      	adds	r2, #8
 8000e9a:	69b9      	ldr	r1, [r7, #24]
 8000e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	2203      	movs	r2, #3
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0203 	and.w	r2, r3, #3
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	f000 80a2 	beq.w	8001026 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b57      	ldr	r3, [pc, #348]	@ (8001044 <HAL_GPIO_Init+0x2e8>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eea:	4a56      	ldr	r2, [pc, #344]	@ (8001044 <HAL_GPIO_Init+0x2e8>)
 8000eec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ef2:	4b54      	ldr	r3, [pc, #336]	@ (8001044 <HAL_GPIO_Init+0x2e8>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000efe:	4a52      	ldr	r2, [pc, #328]	@ (8001048 <HAL_GPIO_Init+0x2ec>)
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	089b      	lsrs	r3, r3, #2
 8000f04:	3302      	adds	r3, #2
 8000f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f003 0303 	and.w	r3, r3, #3
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	220f      	movs	r2, #15
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a49      	ldr	r2, [pc, #292]	@ (800104c <HAL_GPIO_Init+0x2f0>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d019      	beq.n	8000f5e <HAL_GPIO_Init+0x202>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a48      	ldr	r2, [pc, #288]	@ (8001050 <HAL_GPIO_Init+0x2f4>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d013      	beq.n	8000f5a <HAL_GPIO_Init+0x1fe>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a47      	ldr	r2, [pc, #284]	@ (8001054 <HAL_GPIO_Init+0x2f8>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d00d      	beq.n	8000f56 <HAL_GPIO_Init+0x1fa>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a46      	ldr	r2, [pc, #280]	@ (8001058 <HAL_GPIO_Init+0x2fc>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d007      	beq.n	8000f52 <HAL_GPIO_Init+0x1f6>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a45      	ldr	r2, [pc, #276]	@ (800105c <HAL_GPIO_Init+0x300>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d101      	bne.n	8000f4e <HAL_GPIO_Init+0x1f2>
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	e008      	b.n	8000f60 <HAL_GPIO_Init+0x204>
 8000f4e:	2307      	movs	r3, #7
 8000f50:	e006      	b.n	8000f60 <HAL_GPIO_Init+0x204>
 8000f52:	2303      	movs	r3, #3
 8000f54:	e004      	b.n	8000f60 <HAL_GPIO_Init+0x204>
 8000f56:	2302      	movs	r3, #2
 8000f58:	e002      	b.n	8000f60 <HAL_GPIO_Init+0x204>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e000      	b.n	8000f60 <HAL_GPIO_Init+0x204>
 8000f5e:	2300      	movs	r3, #0
 8000f60:	69fa      	ldr	r2, [r7, #28]
 8000f62:	f002 0203 	and.w	r2, r2, #3
 8000f66:	0092      	lsls	r2, r2, #2
 8000f68:	4093      	lsls	r3, r2
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f70:	4935      	ldr	r1, [pc, #212]	@ (8001048 <HAL_GPIO_Init+0x2ec>)
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	089b      	lsrs	r3, r3, #2
 8000f76:	3302      	adds	r3, #2
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f7e:	4b38      	ldr	r3, [pc, #224]	@ (8001060 <HAL_GPIO_Init+0x304>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fa2:	4a2f      	ldr	r2, [pc, #188]	@ (8001060 <HAL_GPIO_Init+0x304>)
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8001060 <HAL_GPIO_Init+0x304>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d003      	beq.n	8000fcc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fcc:	4a24      	ldr	r2, [pc, #144]	@ (8001060 <HAL_GPIO_Init+0x304>)
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fd2:	4b23      	ldr	r3, [pc, #140]	@ (8001060 <HAL_GPIO_Init+0x304>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ff6:	4a1a      	ldr	r2, [pc, #104]	@ (8001060 <HAL_GPIO_Init+0x304>)
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ffc:	4b18      	ldr	r3, [pc, #96]	@ (8001060 <HAL_GPIO_Init+0x304>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001020:	4a0f      	ldr	r2, [pc, #60]	@ (8001060 <HAL_GPIO_Init+0x304>)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3301      	adds	r3, #1
 800102a:	61fb      	str	r3, [r7, #28]
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	2b0f      	cmp	r3, #15
 8001030:	f67f aea2 	bls.w	8000d78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3724      	adds	r7, #36	@ 0x24
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800
 8001048:	40013800 	.word	0x40013800
 800104c:	40020000 	.word	0x40020000
 8001050:	40020400 	.word	0x40020400
 8001054:	40020800 	.word	0x40020800
 8001058:	40020c00 	.word	0x40020c00
 800105c:	40021000 	.word	0x40021000
 8001060:	40013c00 	.word	0x40013c00

08001064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	807b      	strh	r3, [r7, #2]
 8001070:	4613      	mov	r3, r2
 8001072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001074:	787b      	ldrb	r3, [r7, #1]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800107a:	887a      	ldrh	r2, [r7, #2]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001080:	e003      	b.n	800108a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001082:	887b      	ldrh	r3, [r7, #2]
 8001084:	041a      	lsls	r2, r3, #16
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	619a      	str	r2, [r3, #24]
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e12b      	b.n	8001302 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d106      	bne.n	80010c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff fb9c 	bl	80007fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2224      	movs	r2, #36	@ 0x24
 80010c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0201 	bic.w	r2, r2, #1
 80010da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80010ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80010fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010fc:	f002 faa6 	bl	800364c <HAL_RCC_GetPCLK1Freq>
 8001100:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	4a81      	ldr	r2, [pc, #516]	@ (800130c <HAL_I2C_Init+0x274>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d807      	bhi.n	800111c <HAL_I2C_Init+0x84>
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4a80      	ldr	r2, [pc, #512]	@ (8001310 <HAL_I2C_Init+0x278>)
 8001110:	4293      	cmp	r3, r2
 8001112:	bf94      	ite	ls
 8001114:	2301      	movls	r3, #1
 8001116:	2300      	movhi	r3, #0
 8001118:	b2db      	uxtb	r3, r3
 800111a:	e006      	b.n	800112a <HAL_I2C_Init+0x92>
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4a7d      	ldr	r2, [pc, #500]	@ (8001314 <HAL_I2C_Init+0x27c>)
 8001120:	4293      	cmp	r3, r2
 8001122:	bf94      	ite	ls
 8001124:	2301      	movls	r3, #1
 8001126:	2300      	movhi	r3, #0
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e0e7      	b.n	8001302 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4a78      	ldr	r2, [pc, #480]	@ (8001318 <HAL_I2C_Init+0x280>)
 8001136:	fba2 2303 	umull	r2, r3, r2, r3
 800113a:	0c9b      	lsrs	r3, r3, #18
 800113c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68ba      	ldr	r2, [r7, #8]
 800114e:	430a      	orrs	r2, r1
 8001150:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	4a6a      	ldr	r2, [pc, #424]	@ (800130c <HAL_I2C_Init+0x274>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d802      	bhi.n	800116c <HAL_I2C_Init+0xd4>
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	3301      	adds	r3, #1
 800116a:	e009      	b.n	8001180 <HAL_I2C_Init+0xe8>
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001172:	fb02 f303 	mul.w	r3, r2, r3
 8001176:	4a69      	ldr	r2, [pc, #420]	@ (800131c <HAL_I2C_Init+0x284>)
 8001178:	fba2 2303 	umull	r2, r3, r2, r3
 800117c:	099b      	lsrs	r3, r3, #6
 800117e:	3301      	adds	r3, #1
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	6812      	ldr	r2, [r2, #0]
 8001184:	430b      	orrs	r3, r1
 8001186:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001192:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	495c      	ldr	r1, [pc, #368]	@ (800130c <HAL_I2C_Init+0x274>)
 800119c:	428b      	cmp	r3, r1
 800119e:	d819      	bhi.n	80011d4 <HAL_I2C_Init+0x13c>
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	1e59      	subs	r1, r3, #1
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80011ae:	1c59      	adds	r1, r3, #1
 80011b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80011b4:	400b      	ands	r3, r1
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00a      	beq.n	80011d0 <HAL_I2C_Init+0x138>
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	1e59      	subs	r1, r3, #1
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80011c8:	3301      	adds	r3, #1
 80011ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ce:	e051      	b.n	8001274 <HAL_I2C_Init+0x1dc>
 80011d0:	2304      	movs	r3, #4
 80011d2:	e04f      	b.n	8001274 <HAL_I2C_Init+0x1dc>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d111      	bne.n	8001200 <HAL_I2C_Init+0x168>
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	1e58      	subs	r0, r3, #1
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6859      	ldr	r1, [r3, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	440b      	add	r3, r1
 80011ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80011ee:	3301      	adds	r3, #1
 80011f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	bf0c      	ite	eq
 80011f8:	2301      	moveq	r3, #1
 80011fa:	2300      	movne	r3, #0
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	e012      	b.n	8001226 <HAL_I2C_Init+0x18e>
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	1e58      	subs	r0, r3, #1
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6859      	ldr	r1, [r3, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	440b      	add	r3, r1
 800120e:	0099      	lsls	r1, r3, #2
 8001210:	440b      	add	r3, r1
 8001212:	fbb0 f3f3 	udiv	r3, r0, r3
 8001216:	3301      	adds	r3, #1
 8001218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800121c:	2b00      	cmp	r3, #0
 800121e:	bf0c      	ite	eq
 8001220:	2301      	moveq	r3, #1
 8001222:	2300      	movne	r3, #0
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_I2C_Init+0x196>
 800122a:	2301      	movs	r3, #1
 800122c:	e022      	b.n	8001274 <HAL_I2C_Init+0x1dc>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10e      	bne.n	8001254 <HAL_I2C_Init+0x1bc>
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	1e58      	subs	r0, r3, #1
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6859      	ldr	r1, [r3, #4]
 800123e:	460b      	mov	r3, r1
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	440b      	add	r3, r1
 8001244:	fbb0 f3f3 	udiv	r3, r0, r3
 8001248:	3301      	adds	r3, #1
 800124a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800124e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001252:	e00f      	b.n	8001274 <HAL_I2C_Init+0x1dc>
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	1e58      	subs	r0, r3, #1
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6859      	ldr	r1, [r3, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	440b      	add	r3, r1
 8001262:	0099      	lsls	r1, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	fbb0 f3f3 	udiv	r3, r0, r3
 800126a:	3301      	adds	r3, #1
 800126c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001270:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	6809      	ldr	r1, [r1, #0]
 8001278:	4313      	orrs	r3, r2
 800127a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69da      	ldr	r2, [r3, #28]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	431a      	orrs	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80012a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	6911      	ldr	r1, [r2, #16]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68d2      	ldr	r2, [r2, #12]
 80012ae:	4311      	orrs	r1, r2
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	6812      	ldr	r2, [r2, #0]
 80012b4:	430b      	orrs	r3, r1
 80012b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	695a      	ldr	r2, [r3, #20]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	430a      	orrs	r2, r1
 80012d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 0201 	orr.w	r2, r2, #1
 80012e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2220      	movs	r2, #32
 80012ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	000186a0 	.word	0x000186a0
 8001310:	001e847f 	.word	0x001e847f
 8001314:	003d08ff 	.word	0x003d08ff
 8001318:	431bde83 	.word	0x431bde83
 800131c:	10624dd3 	.word	0x10624dd3

08001320 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001332:	2b80      	cmp	r3, #128	@ 0x80
 8001334:	d103      	bne.n	800133e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  }
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800134a:	b480      	push	{r7}
 800134c:	b087      	sub	sp, #28
 800134e:	af00      	add	r7, sp, #0
 8001350:	60f8      	str	r0, [r7, #12]
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	4613      	mov	r3, r2
 8001358:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001360:	b2db      	uxtb	r3, r3
 8001362:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001366:	2b28      	cmp	r3, #40	@ 0x28
 8001368:	d15b      	bne.n	8001422 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d002      	beq.n	8001376 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e054      	b.n	8001424 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001380:	2b01      	cmp	r3, #1
 8001382:	d101      	bne.n	8001388 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8001384:	2302      	movs	r3, #2
 8001386:	e04d      	b.n	8001424 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2201      	movs	r2, #1
 800138c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b01      	cmp	r3, #1
 800139c:	d007      	beq.n	80013ae <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f042 0201 	orr.w	r2, r2, #1
 80013ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013bc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	222a      	movs	r2, #42	@ 0x2a
 80013c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2220      	movs	r2, #32
 80013ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2200      	movs	r2, #0
 80013d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	88fa      	ldrh	r2, [r7, #6]
 80013de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800141c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	e000      	b.n	8001424 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8001422:	2302      	movs	r3, #2
  }
}
 8001424:	4618      	mov	r0, r3
 8001426:	371c      	adds	r7, #28
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b20      	cmp	r3, #32
 8001442:	d124      	bne.n	800148e <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2228      	movs	r2, #40	@ 0x28
 8001448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b01      	cmp	r3, #1
 8001458:	d007      	beq.n	800146a <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f042 0201 	orr.w	r2, r2, #1
 8001468:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001478:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8001488:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	e000      	b.n	8001490 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800148e:	2302      	movs	r3, #2
  }
}
 8001490:	4618      	mov	r0, r3
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014b4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80014bc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014c4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	2b10      	cmp	r3, #16
 80014ca:	d003      	beq.n	80014d4 <HAL_I2C_EV_IRQHandler+0x38>
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	2b40      	cmp	r3, #64	@ 0x40
 80014d0:	f040 80b1 	bne.w	8001636 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10d      	bne.n	800150a <HAL_I2C_EV_IRQHandler+0x6e>
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80014f4:	d003      	beq.n	80014fe <HAL_I2C_EV_IRQHandler+0x62>
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80014fc:	d101      	bne.n	8001502 <HAL_I2C_EV_IRQHandler+0x66>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <HAL_I2C_EV_IRQHandler+0x68>
 8001502:	2300      	movs	r3, #0
 8001504:	2b01      	cmp	r3, #1
 8001506:	f000 8114 	beq.w	8001732 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	2b00      	cmp	r3, #0
 8001512:	d00b      	beq.n	800152c <HAL_I2C_EV_IRQHandler+0x90>
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800151a:	2b00      	cmp	r3, #0
 800151c:	d006      	beq.n	800152c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f001 fc48 	bl	8002db4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 fd4e 	bl	8001fc6 <I2C_Master_SB>
 800152a:	e083      	b.n	8001634 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	2b00      	cmp	r3, #0
 8001534:	d008      	beq.n	8001548 <HAL_I2C_EV_IRQHandler+0xac>
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f000 fdc6 	bl	80020d2 <I2C_Master_ADD10>
 8001546:	e075      	b.n	8001634 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d008      	beq.n	8001564 <HAL_I2C_EV_IRQHandler+0xc8>
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001558:	2b00      	cmp	r3, #0
 800155a:	d003      	beq.n	8001564 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f000 fde2 	bl	8002126 <I2C_Master_ADDR>
 8001562:	e067      	b.n	8001634 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	2b00      	cmp	r3, #0
 800156c:	d036      	beq.n	80015dc <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001578:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800157c:	f000 80db 	beq.w	8001736 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00d      	beq.n	80015a6 <HAL_I2C_EV_IRQHandler+0x10a>
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001590:	2b00      	cmp	r3, #0
 8001592:	d008      	beq.n	80015a6 <HAL_I2C_EV_IRQHandler+0x10a>
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	2b00      	cmp	r3, #0
 800159c:	d103      	bne.n	80015a6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 f9aa 	bl	80018f8 <I2C_MasterTransmit_TXE>
 80015a4:	e046      	b.n	8001634 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 80c2 	beq.w	8001736 <HAL_I2C_EV_IRQHandler+0x29a>
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 80bc 	beq.w	8001736 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80015be:	7bbb      	ldrb	r3, [r7, #14]
 80015c0:	2b21      	cmp	r3, #33	@ 0x21
 80015c2:	d103      	bne.n	80015cc <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 fa33 	bl	8001a30 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015ca:	e0b4      	b.n	8001736 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	2b40      	cmp	r3, #64	@ 0x40
 80015d0:	f040 80b1 	bne.w	8001736 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 faa1 	bl	8001b1c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015da:	e0ac      	b.n	8001736 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80015ea:	f000 80a4 	beq.w	8001736 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d00d      	beq.n	8001614 <HAL_I2C_EV_IRQHandler+0x178>
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d008      	beq.n	8001614 <HAL_I2C_EV_IRQHandler+0x178>
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	d103      	bne.n	8001614 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 fb1d 	bl	8001c4c <I2C_MasterReceive_RXNE>
 8001612:	e00f      	b.n	8001634 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	2b00      	cmp	r3, #0
 800161c:	f000 808b 	beq.w	8001736 <HAL_I2C_EV_IRQHandler+0x29a>
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001626:	2b00      	cmp	r3, #0
 8001628:	f000 8085 	beq.w	8001736 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 fbd5 	bl	8001ddc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001632:	e080      	b.n	8001736 <HAL_I2C_EV_IRQHandler+0x29a>
 8001634:	e07f      	b.n	8001736 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163a:	2b00      	cmp	r3, #0
 800163c:	d004      	beq.n	8001648 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	61fb      	str	r3, [r7, #28]
 8001646:	e007      	b.n	8001658 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d011      	beq.n	8001686 <HAL_I2C_EV_IRQHandler+0x1ea>
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001668:	2b00      	cmp	r3, #0
 800166a:	d00c      	beq.n	8001686 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800167c:	69b9      	ldr	r1, [r7, #24]
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 ffa0 	bl	80025c4 <I2C_Slave_ADDR>
 8001684:	e05a      	b.n	800173c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	f003 0310 	and.w	r3, r3, #16
 800168c:	2b00      	cmp	r3, #0
 800168e:	d008      	beq.n	80016a2 <HAL_I2C_EV_IRQHandler+0x206>
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 ffda 	bl	8002654 <I2C_Slave_STOPF>
 80016a0:	e04c      	b.n	800173c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80016a2:	7bbb      	ldrb	r3, [r7, #14]
 80016a4:	2b21      	cmp	r3, #33	@ 0x21
 80016a6:	d002      	beq.n	80016ae <HAL_I2C_EV_IRQHandler+0x212>
 80016a8:	7bbb      	ldrb	r3, [r7, #14]
 80016aa:	2b29      	cmp	r3, #41	@ 0x29
 80016ac:	d120      	bne.n	80016f0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00d      	beq.n	80016d4 <HAL_I2C_EV_IRQHandler+0x238>
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d008      	beq.n	80016d4 <HAL_I2C_EV_IRQHandler+0x238>
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d103      	bne.n	80016d4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 febb 	bl	8002448 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016d2:	e032      	b.n	800173a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f003 0304 	and.w	r3, r3, #4
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d02d      	beq.n	800173a <HAL_I2C_EV_IRQHandler+0x29e>
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d028      	beq.n	800173a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 feea 	bl	80024c2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016ee:	e024      	b.n	800173a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00d      	beq.n	8001716 <HAL_I2C_EV_IRQHandler+0x27a>
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001700:	2b00      	cmp	r3, #0
 8001702:	d008      	beq.n	8001716 <HAL_I2C_EV_IRQHandler+0x27a>
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f003 0304 	and.w	r3, r3, #4
 800170a:	2b00      	cmp	r3, #0
 800170c:	d103      	bne.n	8001716 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 fef8 	bl	8002504 <I2C_SlaveReceive_RXNE>
 8001714:	e012      	b.n	800173c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00d      	beq.n	800173c <HAL_I2C_EV_IRQHandler+0x2a0>
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001726:	2b00      	cmp	r3, #0
 8001728:	d008      	beq.n	800173c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 ff28 	bl	8002580 <I2C_SlaveReceive_BTF>
 8001730:	e004      	b.n	800173c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001732:	bf00      	nop
 8001734:	e002      	b.n	800173c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001736:	bf00      	nop
 8001738:	e000      	b.n	800173c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800173a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800173c:	3720      	adds	r7, #32
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b08a      	sub	sp, #40	@ 0x28
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800175a:	2300      	movs	r3, #0
 800175c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001764:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800176c:	2b00      	cmp	r3, #0
 800176e:	d00d      	beq.n	800178c <HAL_I2C_ER_IRQHandler+0x4a>
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001776:	2b00      	cmp	r3, #0
 8001778:	d008      	beq.n	800178c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800177a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800178a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00d      	beq.n	80017b2 <HAL_I2C_ER_IRQHandler+0x70>
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800179c:	2b00      	cmp	r3, #0
 800179e:	d008      	beq.n	80017b2 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80017a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a2:	f043 0302 	orr.w	r3, r3, #2
 80017a6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80017b0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80017b2:	6a3b      	ldr	r3, [r7, #32]
 80017b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d03e      	beq.n	800183a <HAL_I2C_ER_IRQHandler+0xf8>
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d039      	beq.n	800183a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80017c6:	7efb      	ldrb	r3, [r7, #27]
 80017c8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017d8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80017e0:	7ebb      	ldrb	r3, [r7, #26]
 80017e2:	2b20      	cmp	r3, #32
 80017e4:	d112      	bne.n	800180c <HAL_I2C_ER_IRQHandler+0xca>
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d10f      	bne.n	800180c <HAL_I2C_ER_IRQHandler+0xca>
 80017ec:	7cfb      	ldrb	r3, [r7, #19]
 80017ee:	2b21      	cmp	r3, #33	@ 0x21
 80017f0:	d008      	beq.n	8001804 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80017f2:	7cfb      	ldrb	r3, [r7, #19]
 80017f4:	2b29      	cmp	r3, #41	@ 0x29
 80017f6:	d005      	beq.n	8001804 <HAL_I2C_ER_IRQHandler+0xc2>
 80017f8:	7cfb      	ldrb	r3, [r7, #19]
 80017fa:	2b28      	cmp	r3, #40	@ 0x28
 80017fc:	d106      	bne.n	800180c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2b21      	cmp	r3, #33	@ 0x21
 8001802:	d103      	bne.n	800180c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f001 f855 	bl	80028b4 <I2C_Slave_AF>
 800180a:	e016      	b.n	800183a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001814:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800181e:	7efb      	ldrb	r3, [r7, #27]
 8001820:	2b10      	cmp	r3, #16
 8001822:	d002      	beq.n	800182a <HAL_I2C_ER_IRQHandler+0xe8>
 8001824:	7efb      	ldrb	r3, [r7, #27]
 8001826:	2b40      	cmp	r3, #64	@ 0x40
 8001828:	d107      	bne.n	800183a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001838:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800183a:	6a3b      	ldr	r3, [r7, #32]
 800183c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00d      	beq.n	8001860 <HAL_I2C_ER_IRQHandler+0x11e>
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800184a:	2b00      	cmp	r3, #0
 800184c:	d008      	beq.n	8001860 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800184e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001850:	f043 0308 	orr.w	r3, r3, #8
 8001854:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800185e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001862:	2b00      	cmp	r3, #0
 8001864:	d008      	beq.n	8001878 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800186a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186c:	431a      	orrs	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f001 f892 	bl	800299c <I2C_ITError>
  }
}
 8001878:	bf00      	nop
 800187a:	3728      	adds	r7, #40	@ 0x28
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001906:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800190e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001914:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800191a:	2b00      	cmp	r3, #0
 800191c:	d150      	bne.n	80019c0 <I2C_MasterTransmit_TXE+0xc8>
 800191e:	7bfb      	ldrb	r3, [r7, #15]
 8001920:	2b21      	cmp	r3, #33	@ 0x21
 8001922:	d14d      	bne.n	80019c0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	2b08      	cmp	r3, #8
 8001928:	d01d      	beq.n	8001966 <I2C_MasterTransmit_TXE+0x6e>
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	2b20      	cmp	r3, #32
 800192e:	d01a      	beq.n	8001966 <I2C_MasterTransmit_TXE+0x6e>
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001936:	d016      	beq.n	8001966 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001946:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2211      	movs	r2, #17
 800194c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2220      	movs	r2, #32
 800195a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff ff8e 	bl	8001880 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001964:	e060      	b.n	8001a28 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001974:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001984:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2220      	movs	r2, #32
 8001990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b40      	cmp	r3, #64	@ 0x40
 800199e:	d107      	bne.n	80019b0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff ff87 	bl	80018bc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80019ae:	e03b      	b.n	8001a28 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff ff61 	bl	8001880 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80019be:	e033      	b.n	8001a28 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
 80019c2:	2b21      	cmp	r3, #33	@ 0x21
 80019c4:	d005      	beq.n	80019d2 <I2C_MasterTransmit_TXE+0xda>
 80019c6:	7bbb      	ldrb	r3, [r7, #14]
 80019c8:	2b40      	cmp	r3, #64	@ 0x40
 80019ca:	d12d      	bne.n	8001a28 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	2b22      	cmp	r3, #34	@ 0x22
 80019d0:	d12a      	bne.n	8001a28 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d108      	bne.n	80019ee <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019ea:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80019ec:	e01c      	b.n	8001a28 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b40      	cmp	r3, #64	@ 0x40
 80019f8:	d103      	bne.n	8001a02 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f88e 	bl	8001b1c <I2C_MemoryTransmit_TXE_BTF>
}
 8001a00:	e012      	b.n	8001a28 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a06:	781a      	ldrb	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001a26:	e7ff      	b.n	8001a28 <I2C_MasterTransmit_TXE+0x130>
 8001a28:	bf00      	nop
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a3c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b21      	cmp	r3, #33	@ 0x21
 8001a48:	d164      	bne.n	8001b14 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d012      	beq.n	8001a7a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a58:	781a      	ldrb	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a64:	1c5a      	adds	r2, r3, #1
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	3b01      	subs	r3, #1
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001a78:	e04c      	b.n	8001b14 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d01d      	beq.n	8001abc <I2C_MasterTransmit_BTF+0x8c>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2b20      	cmp	r3, #32
 8001a84:	d01a      	beq.n	8001abc <I2C_MasterTransmit_BTF+0x8c>
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001a8c:	d016      	beq.n	8001abc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001a9c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2211      	movs	r2, #17
 8001aa2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2220      	movs	r2, #32
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff fee3 	bl	8001880 <HAL_I2C_MasterTxCpltCallback>
}
 8001aba:	e02b      	b.n	8001b14 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001aca:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ada:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b40      	cmp	r3, #64	@ 0x40
 8001af4:	d107      	bne.n	8001b06 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff fedc 	bl	80018bc <HAL_I2C_MemTxCpltCallback>
}
 8001b04:	e006      	b.n	8001b14 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff feb6 	bl	8001880 <HAL_I2C_MasterTxCpltCallback>
}
 8001b14:	bf00      	nop
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b2a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d11d      	bne.n	8001b70 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d10b      	bne.n	8001b54 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b4c:	1c9a      	adds	r2, r3, #2
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001b52:	e077      	b.n	8001c44 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	121b      	asrs	r3, r3, #8
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001b6e:	e069      	b.n	8001c44 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d10b      	bne.n	8001b90 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001b8e:	e059      	b.n	8001c44 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d152      	bne.n	8001c3e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	2b22      	cmp	r3, #34	@ 0x22
 8001b9c:	d10d      	bne.n	8001bba <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bac:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001bb8:	e044      	b.n	8001c44 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d015      	beq.n	8001bf0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	2b21      	cmp	r3, #33	@ 0x21
 8001bc8:	d112      	bne.n	8001bf0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bce:	781a      	ldrb	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	3b01      	subs	r3, #1
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001bee:	e029      	b.n	8001c44 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d124      	bne.n	8001c44 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	2b21      	cmp	r3, #33	@ 0x21
 8001bfe:	d121      	bne.n	8001c44 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001c0e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c1e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2220      	movs	r2, #32
 8001c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff fe40 	bl	80018bc <HAL_I2C_MemTxCpltCallback>
}
 8001c3c:	e002      	b.n	8001c44 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff fb6e 	bl	8001320 <I2C_Flush_DR>
}
 8001c44:	bf00      	nop
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b22      	cmp	r3, #34	@ 0x22
 8001c5e:	f040 80b9 	bne.w	8001dd4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c66:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	2b03      	cmp	r3, #3
 8001c74:	d921      	bls.n	8001cba <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	691a      	ldr	r2, [r3, #16]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c88:	1c5a      	adds	r2, r3, #1
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	3b01      	subs	r3, #1
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	f040 8096 	bne.w	8001dd4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cb6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001cb8:	e08c      	b.n	8001dd4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d07f      	beq.n	8001dc2 <I2C_MasterReceive_RXNE+0x176>
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d002      	beq.n	8001cce <I2C_MasterReceive_RXNE+0x82>
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d179      	bne.n	8001dc2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f001 f83e 	bl	8002d50 <I2C_WaitOnSTOPRequestThroughIT>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d14c      	bne.n	8001d74 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ce8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001cf8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0c:	1c5a      	adds	r2, r3, #1
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2220      	movs	r2, #32
 8001d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b40      	cmp	r3, #64	@ 0x40
 8001d32:	d10a      	bne.n	8001d4a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff fdc4 	bl	80018d0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001d48:	e044      	b.n	8001dd4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d002      	beq.n	8001d5e <I2C_MasterReceive_RXNE+0x112>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2b20      	cmp	r3, #32
 8001d5c:	d103      	bne.n	8001d66 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d64:	e002      	b.n	8001d6c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2212      	movs	r2, #18
 8001d6a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff fd91 	bl	8001894 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001d72:	e02f      	b.n	8001dd4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001d82:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691a      	ldr	r2, [r3, #16]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d96:	1c5a      	adds	r2, r3, #1
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	3b01      	subs	r3, #1
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2220      	movs	r2, #32
 8001dae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7fe fbba 	bl	8000534 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001dc0:	e008      	b.n	8001dd4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dd0:	605a      	str	r2, [r3, #4]
}
 8001dd2:	e7ff      	b.n	8001dd4 <I2C_MasterReceive_RXNE+0x188>
 8001dd4:	bf00      	nop
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d11b      	bne.n	8001e2c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e02:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	691a      	ldr	r2, [r3, #16]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	3b01      	subs	r3, #1
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001e2a:	e0c8      	b.n	8001fbe <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d129      	bne.n	8001e8a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e44:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d00a      	beq.n	8001e62 <I2C_MasterReceive_BTF+0x86>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d007      	beq.n	8001e62 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e60:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e74:	1c5a      	adds	r2, r3, #1
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	3b01      	subs	r3, #1
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001e88:	e099      	b.n	8001fbe <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	f040 8081 	bne.w	8001f98 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d002      	beq.n	8001ea2 <I2C_MasterReceive_BTF+0xc6>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2b10      	cmp	r3, #16
 8001ea0:	d108      	bne.n	8001eb4 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	e019      	b.n	8001ee8 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	d002      	beq.n	8001ec0 <I2C_MasterReceive_BTF+0xe4>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d108      	bne.n	8001ed2 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	e00a      	b.n	8001ee8 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2b10      	cmp	r3, #16
 8001ed6:	d007      	beq.n	8001ee8 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ee6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	691a      	ldr	r2, [r3, #16]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	3b01      	subs	r3, #1
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001f42:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2220      	movs	r2, #32
 8001f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b40      	cmp	r3, #64	@ 0x40
 8001f56:	d10a      	bne.n	8001f6e <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff fcb2 	bl	80018d0 <HAL_I2C_MemRxCpltCallback>
}
 8001f6c:	e027      	b.n	8001fbe <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d002      	beq.n	8001f82 <I2C_MasterReceive_BTF+0x1a6>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b20      	cmp	r3, #32
 8001f80:	d103      	bne.n	8001f8a <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f88:	e002      	b.n	8001f90 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2212      	movs	r2, #18
 8001f8e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff fc7f 	bl	8001894 <HAL_I2C_MasterRxCpltCallback>
}
 8001f96:	e012      	b.n	8001fbe <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691a      	ldr	r2, [r3, #16]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001fbe:	bf00      	nop
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b40      	cmp	r3, #64	@ 0x40
 8001fd8:	d117      	bne.n	800200a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d109      	bne.n	8001ff6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	461a      	mov	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ff2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8001ff4:	e067      	b.n	80020c6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	b2da      	uxtb	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	611a      	str	r2, [r3, #16]
}
 8002008:	e05d      	b.n	80020c6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002012:	d133      	bne.n	800207c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b21      	cmp	r3, #33	@ 0x21
 800201e:	d109      	bne.n	8002034 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002024:	b2db      	uxtb	r3, r3
 8002026:	461a      	mov	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002030:	611a      	str	r2, [r3, #16]
 8002032:	e008      	b.n	8002046 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002038:	b2db      	uxtb	r3, r3
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	b2da      	uxtb	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800204a:	2b00      	cmp	r3, #0
 800204c:	d004      	beq.n	8002058 <I2C_Master_SB+0x92>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002054:	2b00      	cmp	r3, #0
 8002056:	d108      	bne.n	800206a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800205c:	2b00      	cmp	r3, #0
 800205e:	d032      	beq.n	80020c6 <I2C_Master_SB+0x100>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002066:	2b00      	cmp	r3, #0
 8002068:	d02d      	beq.n	80020c6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002078:	605a      	str	r2, [r3, #4]
}
 800207a:	e024      	b.n	80020c6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10e      	bne.n	80020a2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002088:	b29b      	uxth	r3, r3
 800208a:	11db      	asrs	r3, r3, #7
 800208c:	b2db      	uxtb	r3, r3
 800208e:	f003 0306 	and.w	r3, r3, #6
 8002092:	b2db      	uxtb	r3, r3
 8002094:	f063 030f 	orn	r3, r3, #15
 8002098:	b2da      	uxtb	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	611a      	str	r2, [r3, #16]
}
 80020a0:	e011      	b.n	80020c6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d10d      	bne.n	80020c6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	11db      	asrs	r3, r3, #7
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	f003 0306 	and.w	r3, r3, #6
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	f063 030e 	orn	r3, r3, #14
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	611a      	str	r2, [r3, #16]
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d004      	beq.n	80020f8 <I2C_Master_ADD10+0x26>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d108      	bne.n	800210a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00c      	beq.n	800211a <I2C_Master_ADD10+0x48>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002106:	2b00      	cmp	r3, #0
 8002108:	d007      	beq.n	800211a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002118:	605a      	str	r2, [r3, #4]
  }
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002126:	b480      	push	{r7}
 8002128:	b091      	sub	sp, #68	@ 0x44
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002134:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002142:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b22      	cmp	r3, #34	@ 0x22
 800214e:	f040 8169 	bne.w	8002424 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10f      	bne.n	800217a <I2C_Master_ADDR+0x54>
 800215a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800215e:	2b40      	cmp	r3, #64	@ 0x40
 8002160:	d10b      	bne.n	800217a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002162:	2300      	movs	r3, #0
 8002164:	633b      	str	r3, [r7, #48]	@ 0x30
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	633b      	str	r3, [r7, #48]	@ 0x30
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	633b      	str	r3, [r7, #48]	@ 0x30
 8002176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002178:	e160      	b.n	800243c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800217e:	2b00      	cmp	r3, #0
 8002180:	d11d      	bne.n	80021be <I2C_Master_ADDR+0x98>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800218a:	d118      	bne.n	80021be <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800218c:	2300      	movs	r3, #0
 800218e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021b0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021b6:	1c5a      	adds	r2, r3, #1
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	651a      	str	r2, [r3, #80]	@ 0x50
 80021bc:	e13e      	b.n	800243c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d113      	bne.n	80021f0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021c8:	2300      	movs	r3, #0
 80021ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	e115      	b.n	800241c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	f040 808a 	bne.w	8002310 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80021fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021fe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002202:	d137      	bne.n	8002274 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002212:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800221e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002222:	d113      	bne.n	800224c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002232:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002234:	2300      	movs	r3, #0
 8002236:	627b      	str	r3, [r7, #36]	@ 0x24
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	627b      	str	r3, [r7, #36]	@ 0x24
 8002248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224a:	e0e7      	b.n	800241c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800224c:	2300      	movs	r3, #0
 800224e:	623b      	str	r3, [r7, #32]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	623b      	str	r3, [r7, #32]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	623b      	str	r3, [r7, #32]
 8002260:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	e0d3      	b.n	800241c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002276:	2b08      	cmp	r3, #8
 8002278:	d02e      	beq.n	80022d8 <I2C_Master_ADDR+0x1b2>
 800227a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800227c:	2b20      	cmp	r3, #32
 800227e:	d02b      	beq.n	80022d8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002282:	2b12      	cmp	r3, #18
 8002284:	d102      	bne.n	800228c <I2C_Master_ADDR+0x166>
 8002286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002288:	2b01      	cmp	r3, #1
 800228a:	d125      	bne.n	80022d8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800228c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800228e:	2b04      	cmp	r3, #4
 8002290:	d00e      	beq.n	80022b0 <I2C_Master_ADDR+0x18a>
 8002292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002294:	2b02      	cmp	r3, #2
 8002296:	d00b      	beq.n	80022b0 <I2C_Master_ADDR+0x18a>
 8002298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800229a:	2b10      	cmp	r3, #16
 800229c:	d008      	beq.n	80022b0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	e007      	b.n	80022c0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80022be:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022c0:	2300      	movs	r3, #0
 80022c2:	61fb      	str	r3, [r7, #28]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	61fb      	str	r3, [r7, #28]
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	e0a1      	b.n	800241c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022e6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022e8:	2300      	movs	r3, #0
 80022ea:	61bb      	str	r3, [r7, #24]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	61bb      	str	r3, [r7, #24]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	61bb      	str	r3, [r7, #24]
 80022fc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	e085      	b.n	800241c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002314:	b29b      	uxth	r3, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d14d      	bne.n	80023b6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800231a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800231c:	2b04      	cmp	r3, #4
 800231e:	d016      	beq.n	800234e <I2C_Master_ADDR+0x228>
 8002320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002322:	2b02      	cmp	r3, #2
 8002324:	d013      	beq.n	800234e <I2C_Master_ADDR+0x228>
 8002326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002328:	2b10      	cmp	r3, #16
 800232a:	d010      	beq.n	800234e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800233a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	e007      	b.n	800235e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800235c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002368:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800236c:	d117      	bne.n	800239e <I2C_Master_ADDR+0x278>
 800236e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002370:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002374:	d00b      	beq.n	800238e <I2C_Master_ADDR+0x268>
 8002376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002378:	2b01      	cmp	r3, #1
 800237a:	d008      	beq.n	800238e <I2C_Master_ADDR+0x268>
 800237c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800237e:	2b08      	cmp	r3, #8
 8002380:	d005      	beq.n	800238e <I2C_Master_ADDR+0x268>
 8002382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002384:	2b10      	cmp	r3, #16
 8002386:	d002      	beq.n	800238e <I2C_Master_ADDR+0x268>
 8002388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800238a:	2b20      	cmp	r3, #32
 800238c:	d107      	bne.n	800239e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800239c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	e032      	b.n	800241c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80023c4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80023d4:	d117      	bne.n	8002406 <I2C_Master_ADDR+0x2e0>
 80023d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80023dc:	d00b      	beq.n	80023f6 <I2C_Master_ADDR+0x2d0>
 80023de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d008      	beq.n	80023f6 <I2C_Master_ADDR+0x2d0>
 80023e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d005      	beq.n	80023f6 <I2C_Master_ADDR+0x2d0>
 80023ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023ec:	2b10      	cmp	r3, #16
 80023ee:	d002      	beq.n	80023f6 <I2C_Master_ADDR+0x2d0>
 80023f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023f2:	2b20      	cmp	r3, #32
 80023f4:	d107      	bne.n	8002406 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002404:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	613b      	str	r3, [r7, #16]
 800241a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002422:	e00b      	b.n	800243c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002424:	2300      	movs	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
}
 800243a:	e7ff      	b.n	800243c <I2C_Master_ADDR+0x316>
 800243c:	bf00      	nop
 800243e:	3744      	adds	r7, #68	@ 0x44
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002456:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800245c:	b29b      	uxth	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d02b      	beq.n	80024ba <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002466:	781a      	ldrb	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800248a:	b29b      	uxth	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d114      	bne.n	80024ba <I2C_SlaveTransmit_TXE+0x72>
 8002490:	7bfb      	ldrb	r3, [r7, #15]
 8002492:	2b29      	cmp	r3, #41	@ 0x29
 8002494:	d111      	bne.n	80024ba <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024a4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2221      	movs	r2, #33	@ 0x21
 80024aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2228      	movs	r2, #40	@ 0x28
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff f9f7 	bl	80018a8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80024ba:	bf00      	nop
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d011      	beq.n	80024f8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d8:	781a      	ldrb	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002512:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002518:	b29b      	uxth	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d02c      	beq.n	8002578 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	691a      	ldr	r2, [r3, #16]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800253a:	b29b      	uxth	r3, r3
 800253c:	3b01      	subs	r3, #1
 800253e:	b29a      	uxth	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002548:	b29b      	uxth	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d114      	bne.n	8002578 <I2C_SlaveReceive_RXNE+0x74>
 800254e:	7bfb      	ldrb	r3, [r7, #15]
 8002550:	2b2a      	cmp	r3, #42	@ 0x2a
 8002552:	d111      	bne.n	8002578 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002562:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2222      	movs	r2, #34	@ 0x22
 8002568:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2228      	movs	r2, #40	@ 0x28
 800256e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7fd ffcc 	bl	8000510 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002578:	bf00      	nop
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800258c:	b29b      	uxth	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d012      	beq.n	80025b8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	691a      	ldr	r2, [r3, #16]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80025ce:	2300      	movs	r3, #0
 80025d0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80025de:	2b28      	cmp	r3, #40	@ 0x28
 80025e0:	d125      	bne.n	800262e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025f0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80025fc:	2301      	movs	r3, #1
 80025fe:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002606:	2b00      	cmp	r3, #0
 8002608:	d103      	bne.n	8002612 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	81bb      	strh	r3, [r7, #12]
 8002610:	e002      	b.n	8002618 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002620:	89ba      	ldrh	r2, [r7, #12]
 8002622:	7bfb      	ldrb	r3, [r7, #15]
 8002624:	4619      	mov	r1, r3
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7fd ff58 	bl	80004dc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800262c:	e00e      	b.n	800264c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800262e:	2300      	movs	r3, #0
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800264c:	bf00      	nop
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002662:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002672:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002674:	2300      	movs	r3, #0
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0201 	orr.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026a0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026b0:	d172      	bne.n	8002798 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
 80026b4:	2b22      	cmp	r3, #34	@ 0x22
 80026b6:	d002      	beq.n	80026be <I2C_Slave_STOPF+0x6a>
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
 80026ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80026bc:	d135      	bne.n	800272a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026da:	f043 0204 	orr.w	r2, r3, #4
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026f0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fe fb21 	bl	8000d3e <HAL_DMA_GetState>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d049      	beq.n	8002796 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002706:	4a69      	ldr	r2, [pc, #420]	@ (80028ac <I2C_Slave_STOPF+0x258>)
 8002708:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800270e:	4618      	mov	r0, r3
 8002710:	f7fe faf3 	bl	8000cfa <HAL_DMA_Abort_IT>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d03d      	beq.n	8002796 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800271e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002724:	4610      	mov	r0, r2
 8002726:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002728:	e035      	b.n	8002796 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	b29a      	uxth	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d005      	beq.n	800274e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	f043 0204 	orr.w	r2, r3, #4
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800275c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe faeb 	bl	8000d3e <HAL_DMA_GetState>
 8002768:	4603      	mov	r3, r0
 800276a:	2b01      	cmp	r3, #1
 800276c:	d014      	beq.n	8002798 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002772:	4a4e      	ldr	r2, [pc, #312]	@ (80028ac <I2C_Slave_STOPF+0x258>)
 8002774:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800277a:	4618      	mov	r0, r3
 800277c:	f7fe fabd 	bl	8000cfa <HAL_DMA_Abort_IT>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d008      	beq.n	8002798 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800278a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002790:	4610      	mov	r0, r2
 8002792:	4798      	blx	r3
 8002794:	e000      	b.n	8002798 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002796:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800279c:	b29b      	uxth	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d03e      	beq.n	8002820 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d112      	bne.n	80027d6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	691a      	ldr	r2, [r3, #16]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027e0:	2b40      	cmp	r3, #64	@ 0x40
 80027e2:	d112      	bne.n	800280a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691a      	ldr	r2, [r3, #16]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002800:	b29b      	uxth	r3, r3
 8002802:	3b01      	subs	r3, #1
 8002804:	b29a      	uxth	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800280e:	b29b      	uxth	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d005      	beq.n	8002820 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002818:	f043 0204 	orr.w	r2, r3, #4
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 f8b7 	bl	800299c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800282e:	e039      	b.n	80028a4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002830:	7bfb      	ldrb	r3, [r7, #15]
 8002832:	2b2a      	cmp	r3, #42	@ 0x2a
 8002834:	d109      	bne.n	800284a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2228      	movs	r2, #40	@ 0x28
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7fd fe63 	bl	8000510 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b28      	cmp	r3, #40	@ 0x28
 8002854:	d111      	bne.n	800287a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a15      	ldr	r2, [pc, #84]	@ (80028b0 <I2C_Slave_STOPF+0x25c>)
 800285a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2220      	movs	r2, #32
 8002866:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7fd fe26 	bl	80004c4 <HAL_I2C_ListenCpltCallback>
}
 8002878:	e014      	b.n	80028a4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287e:	2b22      	cmp	r3, #34	@ 0x22
 8002880:	d002      	beq.n	8002888 <I2C_Slave_STOPF+0x234>
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	2b22      	cmp	r3, #34	@ 0x22
 8002886:	d10d      	bne.n	80028a4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2220      	movs	r2, #32
 8002892:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7fd fe36 	bl	8000510 <HAL_I2C_SlaveRxCpltCallback>
}
 80028a4:	bf00      	nop
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	08002c01 	.word	0x08002c01
 80028b0:	ffff0000 	.word	0xffff0000

080028b4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028c2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d002      	beq.n	80028d6 <I2C_Slave_AF+0x22>
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2b20      	cmp	r3, #32
 80028d4:	d129      	bne.n	800292a <I2C_Slave_AF+0x76>
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
 80028d8:	2b28      	cmp	r3, #40	@ 0x28
 80028da:	d126      	bne.n	800292a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a2e      	ldr	r2, [pc, #184]	@ (8002998 <I2C_Slave_AF+0xe4>)
 80028e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80028f0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028fa:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800290a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2220      	movs	r2, #32
 8002916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7fd fdce 	bl	80004c4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002928:	e031      	b.n	800298e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800292a:	7bfb      	ldrb	r3, [r7, #15]
 800292c:	2b21      	cmp	r3, #33	@ 0x21
 800292e:	d129      	bne.n	8002984 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a19      	ldr	r2, [pc, #100]	@ (8002998 <I2C_Slave_AF+0xe4>)
 8002934:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2221      	movs	r2, #33	@ 0x21
 800293a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800295a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002964:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002974:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7fe fcd2 	bl	8001320 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7fe ff93 	bl	80018a8 <HAL_I2C_SlaveTxCpltCallback>
}
 8002982:	e004      	b.n	800298e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800298c:	615a      	str	r2, [r3, #20]
}
 800298e:	bf00      	nop
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	ffff0000 	.word	0xffff0000

0800299c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80029b4:	7bbb      	ldrb	r3, [r7, #14]
 80029b6:	2b10      	cmp	r3, #16
 80029b8:	d002      	beq.n	80029c0 <I2C_ITError+0x24>
 80029ba:	7bbb      	ldrb	r3, [r7, #14]
 80029bc:	2b40      	cmp	r3, #64	@ 0x40
 80029be:	d10a      	bne.n	80029d6 <I2C_ITError+0x3a>
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	2b22      	cmp	r3, #34	@ 0x22
 80029c4:	d107      	bne.n	80029d6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029d4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
 80029d8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80029dc:	2b28      	cmp	r3, #40	@ 0x28
 80029de:	d107      	bne.n	80029f0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2228      	movs	r2, #40	@ 0x28
 80029ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80029ee:	e015      	b.n	8002a1c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029fe:	d00a      	beq.n	8002a16 <I2C_ITError+0x7a>
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	2b60      	cmp	r3, #96	@ 0x60
 8002a04:	d007      	beq.n	8002a16 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a2a:	d162      	bne.n	8002af2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a3a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d020      	beq.n	8002a8c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a4e:	4a6a      	ldr	r2, [pc, #424]	@ (8002bf8 <I2C_ITError+0x25c>)
 8002a50:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fe f94f 	bl	8000cfa <HAL_DMA_Abort_IT>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 8089 	beq.w	8002b76 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0201 	bic.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a86:	4610      	mov	r0, r2
 8002a88:	4798      	blx	r3
 8002a8a:	e074      	b.n	8002b76 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a90:	4a59      	ldr	r2, [pc, #356]	@ (8002bf8 <I2C_ITError+0x25c>)
 8002a92:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7fe f92e 	bl	8000cfa <HAL_DMA_Abort_IT>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d068      	beq.n	8002b76 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aae:	2b40      	cmp	r3, #64	@ 0x40
 8002ab0:	d10b      	bne.n	8002aca <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac4:	1c5a      	adds	r2, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0201 	bic.w	r2, r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2220      	movs	r2, #32
 8002ade:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002aec:	4610      	mov	r0, r2
 8002aee:	4798      	blx	r3
 8002af0:	e041      	b.n	8002b76 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b60      	cmp	r3, #96	@ 0x60
 8002afc:	d125      	bne.n	8002b4a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2220      	movs	r2, #32
 8002b02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b16:	2b40      	cmp	r3, #64	@ 0x40
 8002b18:	d10b      	bne.n	8002b32 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	691a      	ldr	r2, [r3, #16]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b24:	b2d2      	uxtb	r2, r2
 8002b26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0201 	bic.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7fe fece 	bl	80018e4 <HAL_I2C_AbortCpltCallback>
 8002b48:	e015      	b.n	8002b76 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b54:	2b40      	cmp	r3, #64	@ 0x40
 8002b56:	d10b      	bne.n	8002b70 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691a      	ldr	r2, [r3, #16]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7fd fcdf 	bl	8000534 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10e      	bne.n	8002ba4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d109      	bne.n	8002ba4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d104      	bne.n	8002ba4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d007      	beq.n	8002bb4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002bb2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bba:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d113      	bne.n	8002bf0 <I2C_ITError+0x254>
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	2b28      	cmp	r3, #40	@ 0x28
 8002bcc:	d110      	bne.n	8002bf0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8002bfc <I2C_ITError+0x260>)
 8002bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7fd fc6a 	bl	80004c4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002bf0:	bf00      	nop
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	08002c01 	.word	0x08002c01
 8002bfc:	ffff0000 	.word	0xffff0000

08002c00 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c10:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c18:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c1a:	4b4b      	ldr	r3, [pc, #300]	@ (8002d48 <I2C_DMAAbort+0x148>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	08db      	lsrs	r3, r3, #3
 8002c20:	4a4a      	ldr	r2, [pc, #296]	@ (8002d4c <I2C_DMAAbort+0x14c>)
 8002c22:	fba2 2303 	umull	r2, r3, r2, r3
 8002c26:	0a1a      	lsrs	r2, r3, #8
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	00da      	lsls	r2, r3, #3
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3e:	f043 0220 	orr.w	r2, r3, #32
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8002c46:	e00a      	b.n	8002c5e <I2C_DMAAbort+0x5e>
    }
    count--;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c5c:	d0ea      	beq.n	8002c34 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c8c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2200      	movs	r2, #0
 8002c92:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0201 	bic.w	r2, r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b60      	cmp	r3, #96	@ 0x60
 8002cce:	d10e      	bne.n	8002cee <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002ce6:	6978      	ldr	r0, [r7, #20]
 8002ce8:	f7fe fdfc 	bl	80018e4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002cec:	e027      	b.n	8002d3e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002cee:	7cfb      	ldrb	r3, [r7, #19]
 8002cf0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002cf4:	2b28      	cmp	r3, #40	@ 0x28
 8002cf6:	d117      	bne.n	8002d28 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d16:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2228      	movs	r2, #40	@ 0x28
 8002d22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002d26:	e007      	b.n	8002d38 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002d38:	6978      	ldr	r0, [r7, #20]
 8002d3a:	f7fd fbfb 	bl	8000534 <HAL_I2C_ErrorCallback>
}
 8002d3e:	bf00      	nop
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	20000000 	.word	0x20000000
 8002d4c:	14f8b589 	.word	0x14f8b589

08002d50 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d5c:	4b13      	ldr	r3, [pc, #76]	@ (8002dac <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	08db      	lsrs	r3, r3, #3
 8002d62:	4a13      	ldr	r2, [pc, #76]	@ (8002db0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002d64:	fba2 2303 	umull	r2, r3, r2, r3
 8002d68:	0a1a      	lsrs	r2, r3, #8
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	3b01      	subs	r3, #1
 8002d76:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d107      	bne.n	8002d8e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d82:	f043 0220 	orr.w	r2, r3, #32
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e008      	b.n	8002da0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d9c:	d0e9      	beq.n	8002d72 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	20000000 	.word	0x20000000
 8002db0:	14f8b589 	.word	0x14f8b589

08002db4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002dc4:	d103      	bne.n	8002dce <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002dcc:	e007      	b.n	8002dde <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002dd6:	d102      	bne.n	8002dde <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2208      	movs	r2, #8
 8002ddc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
	...

08002dec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e267      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d075      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e0a:	4b88      	ldr	r3, [pc, #544]	@ (800302c <HAL_RCC_OscConfig+0x240>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d00c      	beq.n	8002e30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e16:	4b85      	ldr	r3, [pc, #532]	@ (800302c <HAL_RCC_OscConfig+0x240>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d112      	bne.n	8002e48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e22:	4b82      	ldr	r3, [pc, #520]	@ (800302c <HAL_RCC_OscConfig+0x240>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e2e:	d10b      	bne.n	8002e48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e30:	4b7e      	ldr	r3, [pc, #504]	@ (800302c <HAL_RCC_OscConfig+0x240>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d05b      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x108>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d157      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e242      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e50:	d106      	bne.n	8002e60 <HAL_RCC_OscConfig+0x74>
 8002e52:	4b76      	ldr	r3, [pc, #472]	@ (800302c <HAL_RCC_OscConfig+0x240>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a75      	ldr	r2, [pc, #468]	@ (800302c <HAL_RCC_OscConfig+0x240>)
 8002e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	e01d      	b.n	8002e9c <HAL_RCC_OscConfig+0xb0>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e68:	d10c      	bne.n	8002e84 <HAL_RCC_OscConfig+0x98>
 8002e6a:	4b70      	ldr	r3, [pc, #448]	@ (800302c <HAL_RCC_OscConfig+0x240>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a6f      	ldr	r2, [pc, #444]	@ (800302c <HAL_RCC_OscConfig+0x240>)
 8002e70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	4b6d      	ldr	r3, [pc, #436]	@ (800302c <HAL_RCC_OscConfig+0x240>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a6c      	ldr	r2, [pc, #432]	@ (800302c <HAL_RCC_OscConfig+0x240>)
 8002e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	e00b      	b.n	8002e9c <HAL_RCC_OscConfig+0xb0>
 8002e84:	4b69      	ldr	r3, [pc, #420]	@ (800302c <HAL_RCC_OscConfig+0x240>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a68      	ldr	r2, [pc, #416]	@ (800302c <HAL_RCC_OscConfig+0x240>)
 8002e8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e8e:	6013      	str	r3, [r2, #0]
 8002e90:	4b66      	ldr	r3, [pc, #408]	@ (800302c <HAL_RCC_OscConfig+0x240>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a65      	ldr	r2, [pc, #404]	@ (800302c <HAL_RCC_OscConfig+0x240>)
 8002e96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d013      	beq.n	8002ecc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea4:	f7fd fde8 	bl	8000a78 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eac:	f7fd fde4 	bl	8000a78 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b64      	cmp	r3, #100	@ 0x64
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e207      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ebe:	4b5b      	ldr	r3, [pc, #364]	@ (800302c <HAL_RCC_OscConfig+0x240>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0xc0>
 8002eca:	e014      	b.n	8002ef6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ecc:	f7fd fdd4 	bl	8000a78 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ed4:	f7fd fdd0 	bl	8000a78 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b64      	cmp	r3, #100	@ 0x64
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e1f3      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ee6:	4b51      	ldr	r3, [pc, #324]	@ (800302c <HAL_RCC_OscConfig+0x240>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <HAL_RCC_OscConfig+0xe8>
 8002ef2:	e000      	b.n	8002ef6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d063      	beq.n	8002fca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f02:	4b4a      	ldr	r3, [pc, #296]	@ (800302c <HAL_RCC_OscConfig+0x240>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 030c 	and.w	r3, r3, #12
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00b      	beq.n	8002f26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f0e:	4b47      	ldr	r3, [pc, #284]	@ (800302c <HAL_RCC_OscConfig+0x240>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d11c      	bne.n	8002f54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f1a:	4b44      	ldr	r3, [pc, #272]	@ (800302c <HAL_RCC_OscConfig+0x240>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d116      	bne.n	8002f54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f26:	4b41      	ldr	r3, [pc, #260]	@ (800302c <HAL_RCC_OscConfig+0x240>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d005      	beq.n	8002f3e <HAL_RCC_OscConfig+0x152>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d001      	beq.n	8002f3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e1c7      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3e:	4b3b      	ldr	r3, [pc, #236]	@ (800302c <HAL_RCC_OscConfig+0x240>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	4937      	ldr	r1, [pc, #220]	@ (800302c <HAL_RCC_OscConfig+0x240>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f52:	e03a      	b.n	8002fca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d020      	beq.n	8002f9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f5c:	4b34      	ldr	r3, [pc, #208]	@ (8003030 <HAL_RCC_OscConfig+0x244>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f62:	f7fd fd89 	bl	8000a78 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f6a:	f7fd fd85 	bl	8000a78 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e1a8      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7c:	4b2b      	ldr	r3, [pc, #172]	@ (800302c <HAL_RCC_OscConfig+0x240>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0f0      	beq.n	8002f6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f88:	4b28      	ldr	r3, [pc, #160]	@ (800302c <HAL_RCC_OscConfig+0x240>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	4925      	ldr	r1, [pc, #148]	@ (800302c <HAL_RCC_OscConfig+0x240>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	600b      	str	r3, [r1, #0]
 8002f9c:	e015      	b.n	8002fca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f9e:	4b24      	ldr	r3, [pc, #144]	@ (8003030 <HAL_RCC_OscConfig+0x244>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa4:	f7fd fd68 	bl	8000a78 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fac:	f7fd fd64 	bl	8000a78 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e187      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800302c <HAL_RCC_OscConfig+0x240>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d036      	beq.n	8003044 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d016      	beq.n	800300c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fde:	4b15      	ldr	r3, [pc, #84]	@ (8003034 <HAL_RCC_OscConfig+0x248>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe4:	f7fd fd48 	bl	8000a78 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fec:	f7fd fd44 	bl	8000a78 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e167      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800302c <HAL_RCC_OscConfig+0x240>)
 8003000:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0f0      	beq.n	8002fec <HAL_RCC_OscConfig+0x200>
 800300a:	e01b      	b.n	8003044 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800300c:	4b09      	ldr	r3, [pc, #36]	@ (8003034 <HAL_RCC_OscConfig+0x248>)
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003012:	f7fd fd31 	bl	8000a78 <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003018:	e00e      	b.n	8003038 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800301a:	f7fd fd2d 	bl	8000a78 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d907      	bls.n	8003038 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e150      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
 800302c:	40023800 	.word	0x40023800
 8003030:	42470000 	.word	0x42470000
 8003034:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003038:	4b88      	ldr	r3, [pc, #544]	@ (800325c <HAL_RCC_OscConfig+0x470>)
 800303a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1ea      	bne.n	800301a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 8097 	beq.w	8003180 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003052:	2300      	movs	r3, #0
 8003054:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003056:	4b81      	ldr	r3, [pc, #516]	@ (800325c <HAL_RCC_OscConfig+0x470>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10f      	bne.n	8003082 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	4b7d      	ldr	r3, [pc, #500]	@ (800325c <HAL_RCC_OscConfig+0x470>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306a:	4a7c      	ldr	r2, [pc, #496]	@ (800325c <HAL_RCC_OscConfig+0x470>)
 800306c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003070:	6413      	str	r3, [r2, #64]	@ 0x40
 8003072:	4b7a      	ldr	r3, [pc, #488]	@ (800325c <HAL_RCC_OscConfig+0x470>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800307a:	60bb      	str	r3, [r7, #8]
 800307c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800307e:	2301      	movs	r3, #1
 8003080:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003082:	4b77      	ldr	r3, [pc, #476]	@ (8003260 <HAL_RCC_OscConfig+0x474>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800308a:	2b00      	cmp	r3, #0
 800308c:	d118      	bne.n	80030c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800308e:	4b74      	ldr	r3, [pc, #464]	@ (8003260 <HAL_RCC_OscConfig+0x474>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a73      	ldr	r2, [pc, #460]	@ (8003260 <HAL_RCC_OscConfig+0x474>)
 8003094:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003098:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800309a:	f7fd fced 	bl	8000a78 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a2:	f7fd fce9 	bl	8000a78 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e10c      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b4:	4b6a      	ldr	r3, [pc, #424]	@ (8003260 <HAL_RCC_OscConfig+0x474>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0f0      	beq.n	80030a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d106      	bne.n	80030d6 <HAL_RCC_OscConfig+0x2ea>
 80030c8:	4b64      	ldr	r3, [pc, #400]	@ (800325c <HAL_RCC_OscConfig+0x470>)
 80030ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030cc:	4a63      	ldr	r2, [pc, #396]	@ (800325c <HAL_RCC_OscConfig+0x470>)
 80030ce:	f043 0301 	orr.w	r3, r3, #1
 80030d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80030d4:	e01c      	b.n	8003110 <HAL_RCC_OscConfig+0x324>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2b05      	cmp	r3, #5
 80030dc:	d10c      	bne.n	80030f8 <HAL_RCC_OscConfig+0x30c>
 80030de:	4b5f      	ldr	r3, [pc, #380]	@ (800325c <HAL_RCC_OscConfig+0x470>)
 80030e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e2:	4a5e      	ldr	r2, [pc, #376]	@ (800325c <HAL_RCC_OscConfig+0x470>)
 80030e4:	f043 0304 	orr.w	r3, r3, #4
 80030e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80030ea:	4b5c      	ldr	r3, [pc, #368]	@ (800325c <HAL_RCC_OscConfig+0x470>)
 80030ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ee:	4a5b      	ldr	r2, [pc, #364]	@ (800325c <HAL_RCC_OscConfig+0x470>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80030f6:	e00b      	b.n	8003110 <HAL_RCC_OscConfig+0x324>
 80030f8:	4b58      	ldr	r3, [pc, #352]	@ (800325c <HAL_RCC_OscConfig+0x470>)
 80030fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030fc:	4a57      	ldr	r2, [pc, #348]	@ (800325c <HAL_RCC_OscConfig+0x470>)
 80030fe:	f023 0301 	bic.w	r3, r3, #1
 8003102:	6713      	str	r3, [r2, #112]	@ 0x70
 8003104:	4b55      	ldr	r3, [pc, #340]	@ (800325c <HAL_RCC_OscConfig+0x470>)
 8003106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003108:	4a54      	ldr	r2, [pc, #336]	@ (800325c <HAL_RCC_OscConfig+0x470>)
 800310a:	f023 0304 	bic.w	r3, r3, #4
 800310e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d015      	beq.n	8003144 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003118:	f7fd fcae 	bl	8000a78 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311e:	e00a      	b.n	8003136 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003120:	f7fd fcaa 	bl	8000a78 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800312e:	4293      	cmp	r3, r2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e0cb      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003136:	4b49      	ldr	r3, [pc, #292]	@ (800325c <HAL_RCC_OscConfig+0x470>)
 8003138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0ee      	beq.n	8003120 <HAL_RCC_OscConfig+0x334>
 8003142:	e014      	b.n	800316e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003144:	f7fd fc98 	bl	8000a78 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800314a:	e00a      	b.n	8003162 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800314c:	f7fd fc94 	bl	8000a78 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800315a:	4293      	cmp	r3, r2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e0b5      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003162:	4b3e      	ldr	r3, [pc, #248]	@ (800325c <HAL_RCC_OscConfig+0x470>)
 8003164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1ee      	bne.n	800314c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800316e:	7dfb      	ldrb	r3, [r7, #23]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d105      	bne.n	8003180 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003174:	4b39      	ldr	r3, [pc, #228]	@ (800325c <HAL_RCC_OscConfig+0x470>)
 8003176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003178:	4a38      	ldr	r2, [pc, #224]	@ (800325c <HAL_RCC_OscConfig+0x470>)
 800317a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800317e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 80a1 	beq.w	80032cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800318a:	4b34      	ldr	r3, [pc, #208]	@ (800325c <HAL_RCC_OscConfig+0x470>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 030c 	and.w	r3, r3, #12
 8003192:	2b08      	cmp	r3, #8
 8003194:	d05c      	beq.n	8003250 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d141      	bne.n	8003222 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319e:	4b31      	ldr	r3, [pc, #196]	@ (8003264 <HAL_RCC_OscConfig+0x478>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a4:	f7fd fc68 	bl	8000a78 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ac:	f7fd fc64 	bl	8000a78 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e087      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031be:	4b27      	ldr	r3, [pc, #156]	@ (800325c <HAL_RCC_OscConfig+0x470>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69da      	ldr	r2, [r3, #28]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d8:	019b      	lsls	r3, r3, #6
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e0:	085b      	lsrs	r3, r3, #1
 80031e2:	3b01      	subs	r3, #1
 80031e4:	041b      	lsls	r3, r3, #16
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ec:	061b      	lsls	r3, r3, #24
 80031ee:	491b      	ldr	r1, [pc, #108]	@ (800325c <HAL_RCC_OscConfig+0x470>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003264 <HAL_RCC_OscConfig+0x478>)
 80031f6:	2201      	movs	r2, #1
 80031f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fa:	f7fd fc3d 	bl	8000a78 <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003202:	f7fd fc39 	bl	8000a78 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e05c      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003214:	4b11      	ldr	r3, [pc, #68]	@ (800325c <HAL_RCC_OscConfig+0x470>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0f0      	beq.n	8003202 <HAL_RCC_OscConfig+0x416>
 8003220:	e054      	b.n	80032cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003222:	4b10      	ldr	r3, [pc, #64]	@ (8003264 <HAL_RCC_OscConfig+0x478>)
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003228:	f7fd fc26 	bl	8000a78 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003230:	f7fd fc22 	bl	8000a78 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e045      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003242:	4b06      	ldr	r3, [pc, #24]	@ (800325c <HAL_RCC_OscConfig+0x470>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f0      	bne.n	8003230 <HAL_RCC_OscConfig+0x444>
 800324e:	e03d      	b.n	80032cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d107      	bne.n	8003268 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e038      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
 800325c:	40023800 	.word	0x40023800
 8003260:	40007000 	.word	0x40007000
 8003264:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003268:	4b1b      	ldr	r3, [pc, #108]	@ (80032d8 <HAL_RCC_OscConfig+0x4ec>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d028      	beq.n	80032c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003280:	429a      	cmp	r2, r3
 8003282:	d121      	bne.n	80032c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800328e:	429a      	cmp	r2, r3
 8003290:	d11a      	bne.n	80032c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003298:	4013      	ands	r3, r2
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800329e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d111      	bne.n	80032c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ae:	085b      	lsrs	r3, r3, #1
 80032b0:	3b01      	subs	r3, #1
 80032b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d107      	bne.n	80032c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d001      	beq.n	80032cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40023800 	.word	0x40023800

080032dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0cc      	b.n	800348a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032f0:	4b68      	ldr	r3, [pc, #416]	@ (8003494 <HAL_RCC_ClockConfig+0x1b8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d90c      	bls.n	8003318 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fe:	4b65      	ldr	r3, [pc, #404]	@ (8003494 <HAL_RCC_ClockConfig+0x1b8>)
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003306:	4b63      	ldr	r3, [pc, #396]	@ (8003494 <HAL_RCC_ClockConfig+0x1b8>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	d001      	beq.n	8003318 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e0b8      	b.n	800348a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d020      	beq.n	8003366 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d005      	beq.n	800333c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003330:	4b59      	ldr	r3, [pc, #356]	@ (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	4a58      	ldr	r2, [pc, #352]	@ (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800333a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0308 	and.w	r3, r3, #8
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003348:	4b53      	ldr	r3, [pc, #332]	@ (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	4a52      	ldr	r2, [pc, #328]	@ (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003352:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003354:	4b50      	ldr	r3, [pc, #320]	@ (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	494d      	ldr	r1, [pc, #308]	@ (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	4313      	orrs	r3, r2
 8003364:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d044      	beq.n	80033fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d107      	bne.n	800338a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337a:	4b47      	ldr	r3, [pc, #284]	@ (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d119      	bne.n	80033ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e07f      	b.n	800348a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d003      	beq.n	800339a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003396:	2b03      	cmp	r3, #3
 8003398:	d107      	bne.n	80033aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800339a:	4b3f      	ldr	r3, [pc, #252]	@ (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d109      	bne.n	80033ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e06f      	b.n	800348a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033aa:	4b3b      	ldr	r3, [pc, #236]	@ (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e067      	b.n	800348a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ba:	4b37      	ldr	r3, [pc, #220]	@ (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f023 0203 	bic.w	r2, r3, #3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	4934      	ldr	r1, [pc, #208]	@ (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033cc:	f7fd fb54 	bl	8000a78 <HAL_GetTick>
 80033d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d2:	e00a      	b.n	80033ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d4:	f7fd fb50 	bl	8000a78 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e04f      	b.n	800348a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ea:	4b2b      	ldr	r3, [pc, #172]	@ (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 020c 	and.w	r2, r3, #12
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d1eb      	bne.n	80033d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033fc:	4b25      	ldr	r3, [pc, #148]	@ (8003494 <HAL_RCC_ClockConfig+0x1b8>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d20c      	bcs.n	8003424 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340a:	4b22      	ldr	r3, [pc, #136]	@ (8003494 <HAL_RCC_ClockConfig+0x1b8>)
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003412:	4b20      	ldr	r3, [pc, #128]	@ (8003494 <HAL_RCC_ClockConfig+0x1b8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d001      	beq.n	8003424 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e032      	b.n	800348a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d008      	beq.n	8003442 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003430:	4b19      	ldr	r3, [pc, #100]	@ (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	4916      	ldr	r1, [pc, #88]	@ (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 800343e:	4313      	orrs	r3, r2
 8003440:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d009      	beq.n	8003462 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800344e:	4b12      	ldr	r3, [pc, #72]	@ (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	490e      	ldr	r1, [pc, #56]	@ (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	4313      	orrs	r3, r2
 8003460:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003462:	f000 f821 	bl	80034a8 <HAL_RCC_GetSysClockFreq>
 8003466:	4602      	mov	r2, r0
 8003468:	4b0b      	ldr	r3, [pc, #44]	@ (8003498 <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	091b      	lsrs	r3, r3, #4
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	490a      	ldr	r1, [pc, #40]	@ (800349c <HAL_RCC_ClockConfig+0x1c0>)
 8003474:	5ccb      	ldrb	r3, [r1, r3]
 8003476:	fa22 f303 	lsr.w	r3, r2, r3
 800347a:	4a09      	ldr	r2, [pc, #36]	@ (80034a0 <HAL_RCC_ClockConfig+0x1c4>)
 800347c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800347e:	4b09      	ldr	r3, [pc, #36]	@ (80034a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f7fd fab4 	bl	80009f0 <HAL_InitTick>

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40023c00 	.word	0x40023c00
 8003498:	40023800 	.word	0x40023800
 800349c:	080036e4 	.word	0x080036e4
 80034a0:	20000000 	.word	0x20000000
 80034a4:	20000004 	.word	0x20000004

080034a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034ac:	b090      	sub	sp, #64	@ 0x40
 80034ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80034b4:	2300      	movs	r3, #0
 80034b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034b8:	2300      	movs	r3, #0
 80034ba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034c0:	4b59      	ldr	r3, [pc, #356]	@ (8003628 <HAL_RCC_GetSysClockFreq+0x180>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 030c 	and.w	r3, r3, #12
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d00d      	beq.n	80034e8 <HAL_RCC_GetSysClockFreq+0x40>
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	f200 80a1 	bhi.w	8003614 <HAL_RCC_GetSysClockFreq+0x16c>
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d002      	beq.n	80034dc <HAL_RCC_GetSysClockFreq+0x34>
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d003      	beq.n	80034e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80034da:	e09b      	b.n	8003614 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034dc:	4b53      	ldr	r3, [pc, #332]	@ (800362c <HAL_RCC_GetSysClockFreq+0x184>)
 80034de:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80034e0:	e09b      	b.n	800361a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034e2:	4b53      	ldr	r3, [pc, #332]	@ (8003630 <HAL_RCC_GetSysClockFreq+0x188>)
 80034e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034e6:	e098      	b.n	800361a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034e8:	4b4f      	ldr	r3, [pc, #316]	@ (8003628 <HAL_RCC_GetSysClockFreq+0x180>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034f2:	4b4d      	ldr	r3, [pc, #308]	@ (8003628 <HAL_RCC_GetSysClockFreq+0x180>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d028      	beq.n	8003550 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034fe:	4b4a      	ldr	r3, [pc, #296]	@ (8003628 <HAL_RCC_GetSysClockFreq+0x180>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	099b      	lsrs	r3, r3, #6
 8003504:	2200      	movs	r2, #0
 8003506:	623b      	str	r3, [r7, #32]
 8003508:	627a      	str	r2, [r7, #36]	@ 0x24
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003510:	2100      	movs	r1, #0
 8003512:	4b47      	ldr	r3, [pc, #284]	@ (8003630 <HAL_RCC_GetSysClockFreq+0x188>)
 8003514:	fb03 f201 	mul.w	r2, r3, r1
 8003518:	2300      	movs	r3, #0
 800351a:	fb00 f303 	mul.w	r3, r0, r3
 800351e:	4413      	add	r3, r2
 8003520:	4a43      	ldr	r2, [pc, #268]	@ (8003630 <HAL_RCC_GetSysClockFreq+0x188>)
 8003522:	fba0 1202 	umull	r1, r2, r0, r2
 8003526:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003528:	460a      	mov	r2, r1
 800352a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800352c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800352e:	4413      	add	r3, r2
 8003530:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003534:	2200      	movs	r2, #0
 8003536:	61bb      	str	r3, [r7, #24]
 8003538:	61fa      	str	r2, [r7, #28]
 800353a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800353e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003542:	f7fc fe47 	bl	80001d4 <__aeabi_uldivmod>
 8003546:	4602      	mov	r2, r0
 8003548:	460b      	mov	r3, r1
 800354a:	4613      	mov	r3, r2
 800354c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800354e:	e053      	b.n	80035f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003550:	4b35      	ldr	r3, [pc, #212]	@ (8003628 <HAL_RCC_GetSysClockFreq+0x180>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	099b      	lsrs	r3, r3, #6
 8003556:	2200      	movs	r2, #0
 8003558:	613b      	str	r3, [r7, #16]
 800355a:	617a      	str	r2, [r7, #20]
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003562:	f04f 0b00 	mov.w	fp, #0
 8003566:	4652      	mov	r2, sl
 8003568:	465b      	mov	r3, fp
 800356a:	f04f 0000 	mov.w	r0, #0
 800356e:	f04f 0100 	mov.w	r1, #0
 8003572:	0159      	lsls	r1, r3, #5
 8003574:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003578:	0150      	lsls	r0, r2, #5
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
 800357e:	ebb2 080a 	subs.w	r8, r2, sl
 8003582:	eb63 090b 	sbc.w	r9, r3, fp
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003592:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003596:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800359a:	ebb2 0408 	subs.w	r4, r2, r8
 800359e:	eb63 0509 	sbc.w	r5, r3, r9
 80035a2:	f04f 0200 	mov.w	r2, #0
 80035a6:	f04f 0300 	mov.w	r3, #0
 80035aa:	00eb      	lsls	r3, r5, #3
 80035ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035b0:	00e2      	lsls	r2, r4, #3
 80035b2:	4614      	mov	r4, r2
 80035b4:	461d      	mov	r5, r3
 80035b6:	eb14 030a 	adds.w	r3, r4, sl
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	eb45 030b 	adc.w	r3, r5, fp
 80035c0:	607b      	str	r3, [r7, #4]
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	f04f 0300 	mov.w	r3, #0
 80035ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035ce:	4629      	mov	r1, r5
 80035d0:	028b      	lsls	r3, r1, #10
 80035d2:	4621      	mov	r1, r4
 80035d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035d8:	4621      	mov	r1, r4
 80035da:	028a      	lsls	r2, r1, #10
 80035dc:	4610      	mov	r0, r2
 80035de:	4619      	mov	r1, r3
 80035e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e2:	2200      	movs	r2, #0
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	60fa      	str	r2, [r7, #12]
 80035e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035ec:	f7fc fdf2 	bl	80001d4 <__aeabi_uldivmod>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4613      	mov	r3, r2
 80035f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003628 <HAL_RCC_GetSysClockFreq+0x180>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	0c1b      	lsrs	r3, r3, #16
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	3301      	adds	r3, #1
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003608:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800360a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800360c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003610:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003612:	e002      	b.n	800361a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003614:	4b05      	ldr	r3, [pc, #20]	@ (800362c <HAL_RCC_GetSysClockFreq+0x184>)
 8003616:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003618:	bf00      	nop
    }
  }
  return sysclockfreq;
 800361a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800361c:	4618      	mov	r0, r3
 800361e:	3740      	adds	r7, #64	@ 0x40
 8003620:	46bd      	mov	sp, r7
 8003622:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003626:	bf00      	nop
 8003628:	40023800 	.word	0x40023800
 800362c:	00f42400 	.word	0x00f42400
 8003630:	017d7840 	.word	0x017d7840

08003634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003638:	4b03      	ldr	r3, [pc, #12]	@ (8003648 <HAL_RCC_GetHCLKFreq+0x14>)
 800363a:	681b      	ldr	r3, [r3, #0]
}
 800363c:	4618      	mov	r0, r3
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	20000000 	.word	0x20000000

0800364c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003650:	f7ff fff0 	bl	8003634 <HAL_RCC_GetHCLKFreq>
 8003654:	4602      	mov	r2, r0
 8003656:	4b05      	ldr	r3, [pc, #20]	@ (800366c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	0a9b      	lsrs	r3, r3, #10
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	4903      	ldr	r1, [pc, #12]	@ (8003670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003662:	5ccb      	ldrb	r3, [r1, r3]
 8003664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003668:	4618      	mov	r0, r3
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40023800 	.word	0x40023800
 8003670:	080036f4 	.word	0x080036f4

08003674 <memset>:
 8003674:	4402      	add	r2, r0
 8003676:	4603      	mov	r3, r0
 8003678:	4293      	cmp	r3, r2
 800367a:	d100      	bne.n	800367e <memset+0xa>
 800367c:	4770      	bx	lr
 800367e:	f803 1b01 	strb.w	r1, [r3], #1
 8003682:	e7f9      	b.n	8003678 <memset+0x4>

08003684 <__libc_init_array>:
 8003684:	b570      	push	{r4, r5, r6, lr}
 8003686:	4d0d      	ldr	r5, [pc, #52]	@ (80036bc <__libc_init_array+0x38>)
 8003688:	4c0d      	ldr	r4, [pc, #52]	@ (80036c0 <__libc_init_array+0x3c>)
 800368a:	1b64      	subs	r4, r4, r5
 800368c:	10a4      	asrs	r4, r4, #2
 800368e:	2600      	movs	r6, #0
 8003690:	42a6      	cmp	r6, r4
 8003692:	d109      	bne.n	80036a8 <__libc_init_array+0x24>
 8003694:	4d0b      	ldr	r5, [pc, #44]	@ (80036c4 <__libc_init_array+0x40>)
 8003696:	4c0c      	ldr	r4, [pc, #48]	@ (80036c8 <__libc_init_array+0x44>)
 8003698:	f000 f818 	bl	80036cc <_init>
 800369c:	1b64      	subs	r4, r4, r5
 800369e:	10a4      	asrs	r4, r4, #2
 80036a0:	2600      	movs	r6, #0
 80036a2:	42a6      	cmp	r6, r4
 80036a4:	d105      	bne.n	80036b2 <__libc_init_array+0x2e>
 80036a6:	bd70      	pop	{r4, r5, r6, pc}
 80036a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ac:	4798      	blx	r3
 80036ae:	3601      	adds	r6, #1
 80036b0:	e7ee      	b.n	8003690 <__libc_init_array+0xc>
 80036b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80036b6:	4798      	blx	r3
 80036b8:	3601      	adds	r6, #1
 80036ba:	e7f2      	b.n	80036a2 <__libc_init_array+0x1e>
 80036bc:	08003704 	.word	0x08003704
 80036c0:	08003704 	.word	0x08003704
 80036c4:	08003704 	.word	0x08003704
 80036c8:	08003708 	.word	0x08003708

080036cc <_init>:
 80036cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ce:	bf00      	nop
 80036d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036d2:	bc08      	pop	{r3}
 80036d4:	469e      	mov	lr, r3
 80036d6:	4770      	bx	lr

080036d8 <_fini>:
 80036d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036da:	bf00      	nop
 80036dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036de:	bc08      	pop	{r3}
 80036e0:	469e      	mov	lr, r3
 80036e2:	4770      	bx	lr
